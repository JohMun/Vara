{"version":3,"file":"vara.umd.development.js","sources":["../src/utils/char.ts","../src/utils/constants.ts","../src/types.ts","../src/utils/renderbase.ts","../src/utils/letterpart.ts","../src/utils/letter.ts","../src/utils/line.ts","../src/utils/block.ts","../src/index.ts"],"sourcesContent":["import { VaraFontItem } from '../types';\r\n\r\ninterface VaraCharProps {\r\n    char: string;\r\n    fontItem: VaraFontItem;\r\n    isSpace?: boolean;\r\n}\r\n\r\nlet varaCharId = 0;\r\n\r\nexport default class VaraChar {\r\n    char: string;\r\n    id: number;\r\n    fontItem: VaraFontItem;\r\n    isSpace: boolean;\r\n\r\n    constructor(props: VaraCharProps) {\r\n        this.char = props.char;\r\n        this.fontItem = props.fontItem;\r\n        this.isSpace = props.isSpace ?? false;\r\n\r\n        this.id = varaCharId;\r\n        varaCharId++;\r\n    }\r\n\r\n    getFontItem() {\r\n        return this.fontItem;\r\n    }\r\n\r\n    getId() {\r\n        return this.id;\r\n    }\r\n}\r\n","export const SCALEBASE = 16;\r\nexport const WHITESPACE = 10;\r\n","import Block from \"./utils/block\";\r\nimport Letter from \"./utils/letter\";\r\nimport LetterPart from \"./utils/letterpart\";\r\nimport Line from \"./utils/line\";\r\n\r\nexport type VaraGeneralOptions = {\r\n    fontSize?: number;\r\n    strokeWidth?: number;\r\n    color?: string;\r\n    duration?: number;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    autoAnimation?: boolean;\r\n    queued?: boolean;\r\n    delay?: number;\r\n    letterSpacing?:\r\n        | {\r\n              [x: string]: number;\r\n          }\r\n        | number;\r\n    breakWord?: boolean;\r\n    width?: number;\r\n    lineHeight?: number;\r\n};\r\n\r\nexport type VaraTextOptions = VaraGeneralOptions & {\r\n    id?: string | number | false;\r\n    x?: number;\r\n    y?: number;\r\n    absolutePosition?: boolean;\r\n};\r\n\r\nexport type VaraText = VaraTextOptions & {\r\n    text: string | string[];\r\n};\r\n\r\nexport type VaraFontItem = {\r\n    paths: Array<{\r\n        w: number;\r\n        h: number;\r\n        my: number;\r\n        mx: number;\r\n        dx: number;\r\n        d: string;\r\n        pl: number;\r\n    }>;\r\n    w: number;\r\n};\r\n\r\nexport type ObjectKeys<T> = T extends object\r\n    ? (keyof T)[]\r\n    : T extends number\r\n    ? []\r\n    : T extends Array<any> | string\r\n    ? string[]\r\n    : never;\r\n\r\nexport const BLOCK_COMPOSITION = [\"block\",\"line\",\"letter\",\"letterPart\"] as const;\r\n\r\nexport type BlockComposition = typeof BLOCK_COMPOSITION;\r\n\r\nexport type BlockName = BlockComposition[number];\r\n\r\nexport type Blocks = Block | Line | Letter | LetterPart;\r\n\r\nexport type BlockMapped = {\r\n    \"block\" : Block,\r\n    \"line\": Line,\r\n    \"letter\": Letter,\r\n    \"letterPart\": LetterPart\r\n}","import { BlockMapped, BlockName, Blocks, BLOCK_COMPOSITION } from '../types';\r\n\r\ninterface RenderItemProps {\r\n    ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks;\r\n}\r\n\r\nexport default class RenderBase {\r\n    protected ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks | null;\r\n    name: BlockName;\r\n\r\n    constructor(props: RenderItemProps) {\r\n        this.ctx = props.ctx;\r\n        this.parent = props.parent ?? null;\r\n        this.name = 'block';\r\n    }\r\n\r\n    getParent<T extends BlockName>(\r\n        parentName: T,\r\n        current: Blocks\r\n    ): BlockMapped[T] | false {\r\n        const parentIndex = BLOCK_COMPOSITION.indexOf(parentName);\r\n        const currentItemIndex = BLOCK_COMPOSITION.indexOf(this.name);\r\n        if (parentIndex < currentItemIndex) {\r\n            if (current.name === parentName) {\r\n                return current as BlockMapped[T];\r\n            } else {\r\n                if (current.parent)\r\n                    return this.getParent(parentName, current?.parent);\r\n                else return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","import { BlockName } from '../types';\r\nimport Block from './block';\r\nimport Letter from './letter';\r\nimport RenderBase from './renderbase';\r\n\r\nexport interface LetterPartProps {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Letter;\r\n}\r\n\r\nexport default class LetterPart extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    name: BlockName;\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterPartProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.path = props.path;\r\n        this.pathLength = props.pathLength;\r\n        this.dashOffset = props.dashOffset;\r\n        this.width = props.width;\r\n\r\n        this.name = 'letterPart';\r\n\r\n        this.rootBlock = this.getParent('block', this) as Block;\r\n    }\r\n\r\n    /**\r\n     * Paints the path\r\n     */\r\n    paint() {\r\n        // console.log(this.x,this.y);\r\n        this.ctx.save();\r\n        this.ctx.stroke(\r\n            new Path2D(this.processPath(this.path, this.x, this.y))\r\n        );\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Increments the dashOffset and then paints the path.\r\n     */\r\n    draw(delta: number) {\r\n        const pathDuration =\r\n            ((this.pathLength / this.rootBlock.totalPathLength) *\r\n                this.rootBlock.options.duration) /\r\n            1000;\r\n\r\n        const speed = this.pathLength / pathDuration;\r\n\r\n        this.ctx.save();\r\n        this.ctx.lineDashOffset = 1;\r\n        this.ctx.setLineDash([this.dashOffset, this.pathLength + 1]);\r\n        this.dashOffset += speed * delta;\r\n        this.paint();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n}\r\n","import { BlockName } from '../types';\r\nimport Block from './block';\r\nimport VaraChar from './char';\r\nimport LetterPart, { LetterPartProps } from './letterpart';\r\nimport Line from './line';\r\nimport RenderBase from './renderbase';\r\n\r\nexport interface LetterProps {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Line;\r\n    character: VaraChar;\r\n}\r\n\r\nlet letterId = 0;\r\n\r\nexport default class Letter extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    character: VaraChar;\r\n    id: number;\r\n\r\n    parts: LetterPart[];\r\n\r\n    drawnParts: LetterPart[];\r\n    name: BlockName;\r\n\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.width = props.width;\r\n        this.parts = [];\r\n        this.drawnParts = [];\r\n        this.name = 'letter';\r\n\r\n        this.character = props.character;\r\n\r\n        this.id = letterId;\r\n        letterId++;\r\n\r\n        this.rootBlock = this.getParent('block', this) as Block;\r\n    }\r\n\r\n    setPosition(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Add a new part to the queue\r\n     * @param part The part to be added\r\n     */\r\n    addPart(part: Omit<LetterPartProps, 'ctx' | 'parent'>) {\r\n        this.parts.push(\r\n            new LetterPart({\r\n                ...part,\r\n                ctx: this.ctx,\r\n                parent: this,\r\n            })\r\n        );\r\n\r\n        // Update the total path length stored in the main block.\r\n        if (this.rootBlock) {\r\n            this.rootBlock.modifyPathLength(part.pathLength, 'increment');\r\n        }\r\n    }\r\n\r\n    setParent(parent: Line) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    isDone() {\r\n        return this.parts.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a part has been drawn completely.\r\n     *\r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.parts.shift();\r\n        if (removedItem) this.drawnParts.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current letter\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, previousRAFTime: number) {\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale, this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        const delta = (rafTime - previousRAFTime) / 1000;\r\n\r\n        if (this.parts.length > 0) {\r\n            const part = this.parts[0];\r\n            if (part.dashOffset > part.pathLength) {\r\n                this.dequeue();\r\n            } else {\r\n                part.draw(delta);\r\n            }\r\n        }\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        });\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Paints the paths whose animations are complete\r\n     */\r\n    paint() {\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale, this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        });\r\n\r\n        this.ctx.restore();\r\n    }\r\n}\r\n","import Block from './block';\r\nimport Letter, { LetterProps } from './letter';\r\nimport RenderBase from './renderbase';\r\n\r\nexport interface LineProps {\r\n    x: number;\r\n    y: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Block;\r\n}\r\n\r\nlet lineId = 0;\r\n\r\n/**\r\n * Used to represent a line of text drawn in the canvas.\r\n *\r\n */\r\n\r\nexport default class Line extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    letters: Letter[];\r\n    drawnLetters: Letter[];\r\n    id: number;\r\n\r\n    private _letters: Letter[];\r\n\r\n    constructor(props: LineProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.ctx = props.ctx;\r\n\r\n        // This will act as queue of letters\r\n        // Each item is animated one after the other\r\n        this.letters = [];\r\n\r\n        // This will contain all the letters that have already been drawn (animated).\r\n        this.drawnLetters = [];\r\n\r\n        // Contains both drawn and queued letters in the order they were created\r\n        this._letters = [];\r\n\r\n        // The name of this class.\r\n        // Name is used for finding a specific parent using the getParent method\r\n        this.name = 'line';\r\n\r\n        this.id = lineId;\r\n        lineId++;\r\n    }\r\n\r\n    /**\r\n     * Add a new letter to this line\r\n     * @param letter - The letter to be added\r\n     */\r\n    addLetter(letter: Omit<LetterProps, 'ctx' | 'parent'> & { parent?: Line }) {\r\n        // Create the letter\r\n\r\n        const newLetter = new Letter({\r\n            ...letter,\r\n            parent: letter.parent ?? this,\r\n            ctx: this.ctx,\r\n        });\r\n\r\n        // Create all the parts of the letter\r\n        // A letter can have multiple parts.\r\n        // The letter i has two parts, the tittle (dot) and the line part?\r\n\r\n        letter.character.getFontItem().paths.forEach(path => {\r\n            newLetter.addPart({\r\n                path: path.d,\r\n                x: path.mx - path.dx,\r\n                y: -path.my,\r\n                pathLength: path.pl,\r\n                dashOffset: 0,\r\n                width: path.w,\r\n            });\r\n        });\r\n\r\n        // The letter is pushed to both letters and _letters array\r\n        this.letters.push(newLetter);\r\n        this._letters.push(newLetter);\r\n\r\n        // Return the newly created letter\r\n        return newLetter;\r\n    }\r\n\r\n    removeLetter(letterId: number) {\r\n        this._letters = this._letters.filter(letter => letter.id !== letterId);\r\n        this.letters = this.letters.filter(letter => letter.id !== letterId);\r\n        this.drawnLetters = this.drawnLetters.filter(\r\n            letter => letter.id !== letterId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Override the letters of this line.\r\n     *\r\n     * Letter states are preserved.\r\n     *\r\n     * @param letters The new letters of the line\r\n     */\r\n    setLetters(letters: Letter[]) {\r\n        this._letters = letters;\r\n        this.letters = letters.filter(letter => !letter.isDone());\r\n        this.drawnLetters = letters.filter(letter => letter.isDone());\r\n    }\r\n\r\n    /**\r\n     * Sets the position of the current line\r\n     * @param x X-coordinate, relative to the parent block\r\n     * @param y Y-coordinate, relative to the parent block\r\n     */\r\n    setPosition(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Used to check if all the letters in this line have been drawn.\r\n     */\r\n    isDone() {\r\n        return this.letters.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns all the letters in this line including those that are to be animated.\r\n     */\r\n    getAllLetters() {\r\n        return this._letters;\r\n    }\r\n\r\n    /**\r\n     * Remove the first letter from the queue. Used when a letter has been drawn completely.\r\n     * The removed letter is moved to the drawnLetters array\r\n     */\r\n    private dequeue() {\r\n        const removedItem = this.letters.shift();\r\n        if (removedItem) this.drawnLetters.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current line\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, prevRAFTime: number) {\r\n        this.ctx.save();\r\n\r\n        // Set the position of the line\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        if (this.letters.length > 0) {\r\n            const currentLetter = this.letters[0];\r\n            currentLetter.render(rafTime, prevRAFTime);\r\n\r\n            // If the current letter is animated, then remove it from the queue and add it to the drawn letters\r\n            if (currentLetter.isDone()) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n\r\n        // Paint all the already animated letters\r\n        // The paint method will draw the line without changing the dashOffset\r\n\r\n        this.drawnLetters.forEach(letter => {\r\n            letter.paint();\r\n        });\r\n\r\n        // Restore canvas state (position)\r\n        this.ctx.restore();\r\n    }\r\n}\r\n","import Vara from '..';\r\nimport { BlockName, VaraText } from '../types';\r\nimport VaraChar from './char';\r\nimport { SCALEBASE, WHITESPACE } from './constants';\r\nimport Letter from './letter';\r\nimport Line, { LineProps } from './line';\r\nimport RenderBase from './renderbase';\r\n\r\ninterface BlockProps {\r\n    ctx: CanvasRenderingContext2D;\r\n    options: Required<VaraText>;\r\n    root: Vara;\r\n}\r\n\r\nexport default class Block extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    scale: number;\r\n\r\n    ctx: CanvasRenderingContext2D;\r\n    previousRAFTime: number;\r\n    lines: Line[];\r\n    drawnLines: Line[];\r\n    totalPathLength: number;\r\n    options: Required<VaraText>;\r\n    text: VaraChar[][];\r\n\r\n    private root: Vara;\r\n    private _lines: Line[];\r\n    private userDefinedRenderFn: (\r\n        ctx: CanvasRenderingContext2D,\r\n        rafTime: number\r\n    ) => void;\r\n\r\n    name: BlockName;\r\n\r\n    constructor(props: BlockProps) {\r\n        super(props);\r\n\r\n        this.x = props.options.x;\r\n        this.y = props.options.y;\r\n        this.width = props.options.width;\r\n        this.height = 0;\r\n\r\n        this.lines = [];\r\n        this._lines = [];\r\n        this.drawnLines = [];\r\n        this.ctx = props.ctx;\r\n        this.previousRAFTime = 0;\r\n        this.totalPathLength = 0;\r\n        this.text = [];\r\n        this.options = props.options;\r\n\r\n        this.name = 'block';\r\n\r\n        this.scale = props.options.fontSize / SCALEBASE;\r\n        this.root = props.root;\r\n\r\n        this.userDefinedRenderFn = () => null;\r\n\r\n        this.initTextToVaraChar();\r\n\r\n        this.generatePositions();\r\n    }\r\n\r\n    // Begin private functions\r\n\r\n    private initTextToVaraChar() {\r\n        if (typeof this.options.text === 'string') {\r\n            this.text = [\r\n                this.options.text.split('').map(\r\n                    letter =>\r\n                        new VaraChar({\r\n                            char: letter,\r\n                            fontItem:\r\n                                this.root.fontCharacters[\r\n                                    letter.charCodeAt(0)\r\n                                ] || this.root.fontCharacters['63'],\r\n                            isSpace: letter === ' ',\r\n                        })\r\n                ),\r\n            ];\r\n        } else if (Array.isArray(this.options.text)) {\r\n            this.text = this.options.text.map(line =>\r\n                line.split('').map(\r\n                    letter =>\r\n                        new VaraChar({\r\n                            char: letter,\r\n                            fontItem:\r\n                                this.root.fontCharacters[\r\n                                    letter.charCodeAt(0)\r\n                                ] || this.root.fontCharacters['63'],\r\n                            isSpace: letter === ' ',\r\n                        })\r\n                )\r\n            );\r\n        } else {\r\n            // TODO: Show warning / error\r\n            this.text = [];\r\n        }\r\n    }\r\n\r\n    private regeneratePositions(\r\n        lines: {\r\n            text: VaraChar[];\r\n            width: number;\r\n        }[]\r\n    ) {\r\n        let scale = this.scale;\r\n        this.height = 0;\r\n\r\n        let top = this.options.lineHeight;\r\n\r\n        const lettersToSetInLine: Letter[][] = [];\r\n\r\n        lines.forEach((line, lineIndex) => {\r\n            let left = 0;\r\n            let x = 0,\r\n                y = top;\r\n            if (this.options.textAlign === 'center') {\r\n                x = (this.options.width - line.width) / 2;\r\n            }\r\n\r\n            let lineClass = this.getLineAtIndex(lineIndex);\r\n            lineClass.setPosition(x, y);\r\n\r\n            const lettersToSet: Letter[] = [];\r\n\r\n            line.text.forEach(char => {\r\n                if (char.isSpace) {\r\n                    left += WHITESPACE;\r\n                } else {\r\n                    let foundLetter = this.getLetterByCharacterId(char.id);\r\n                    if (foundLetter) {\r\n                        foundLetter.setParent(lineClass);\r\n                        foundLetter.setPosition(left, top);\r\n                        lettersToSet.push(foundLetter);\r\n\r\n                        left += foundLetter.character.getFontItem().w;\r\n                    } else {\r\n                        // TODO: Show meaningful error\r\n                        console.error(\r\n                            `Error - Letter with id ${char.id} not found`\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n            top += this.options.lineHeight;\r\n            this.height += this.options.lineHeight * scale;\r\n\r\n            lettersToSetInLine.push(lettersToSet);\r\n        });\r\n\r\n        this.getLines().forEach((line, lineIndex) => {\r\n            line.setLetters(lettersToSetInLine[lineIndex]);\r\n        });\r\n    }\r\n\r\n    private generatePositions() {\r\n        let scale = this.scale;\r\n        this.height = 0;\r\n\r\n        const lines = this.generateLineData(this.text);\r\n        console.log(lines);\r\n\r\n        let top = this.options.lineHeight;\r\n        lines.forEach(line => {\r\n            let left = 0;\r\n            let x = 0,\r\n                y = top;\r\n            if (this.options.textAlign === 'center') {\r\n                x = (this.options.width - line.width) / 2;\r\n            }\r\n\r\n            const lineClass = this.addLine({\r\n                x,\r\n                y,\r\n            });\r\n\r\n            line.text.forEach(letter => {\r\n                if (letter.isSpace) {\r\n                    left += WHITESPACE;\r\n                } else {\r\n                    const currentLetter = letter.getFontItem();\r\n\r\n                    lineClass.addLetter({\r\n                        x: left,\r\n                        y: top,\r\n                        width: currentLetter.w,\r\n                        character: letter,\r\n                    });\r\n\r\n                    left += currentLetter.w;\r\n                }\r\n            });\r\n            top += this.options.lineHeight;\r\n            this.height += this.options.lineHeight * scale;\r\n        });\r\n    }\r\n\r\n    private generateLineData(lines: VaraChar[][]) {\r\n        let scale = this.options.fontSize / SCALEBASE;\r\n\r\n        const returnData: {\r\n            text: VaraChar[];\r\n            width: number;\r\n        }[] = [\r\n            {\r\n                text: [],\r\n                width: 0,\r\n            },\r\n        ];\r\n\r\n        const wordSplittedLines: VaraChar[][][] = [];\r\n\r\n        lines.forEach(line => {\r\n            let l: VaraChar[][] = [[]];\r\n            line.forEach(letter => {\r\n                if (letter.isSpace) {\r\n                    l.push([]);\r\n                } else {\r\n                    l[l.length - 1].push(letter);\r\n                }\r\n            });\r\n            wordSplittedLines.push(l);\r\n        });\r\n\r\n        wordSplittedLines.forEach(line => {\r\n            let spaceWidth = 0;\r\n            line.forEach(word => {\r\n                let wordWidth = 0;\r\n\r\n                word.forEach(letter => {\r\n                    const currentLetter = letter.getFontItem();\r\n\r\n                    let pathPositionCorrection = currentLetter.paths.reduce(\r\n                        (a, c) => a + c.mx - c.dx,\r\n                        0\r\n                    );\r\n                    wordWidth +=\r\n                        (currentLetter.w + pathPositionCorrection) * scale;\r\n                });\r\n\r\n                if (\r\n                    (returnData[returnData.length - 1]?.width ?? 0) +\r\n                        wordWidth +\r\n                        spaceWidth +\r\n                        this.options.x >\r\n                    this.options.width\r\n                ) {\r\n                    returnData.push({\r\n                        text: [\r\n                            ...word,\r\n                            new VaraChar({\r\n                                char: ' ',\r\n                                fontItem: this.root.fontCharacters['63'],\r\n                                isSpace: true,\r\n                            }),\r\n                        ],\r\n                        width: wordWidth,\r\n                    });\r\n                    spaceWidth = 0;\r\n                } else {\r\n                    returnData[returnData.length - 1] = {\r\n                        text: [\r\n                            ...returnData[returnData.length - 1].text,\r\n                            ...word,\r\n                            new VaraChar({\r\n                                char: ' ',\r\n                                fontItem: this.root.fontCharacters['63'],\r\n                                isSpace: true,\r\n                            }),\r\n                        ],\r\n                        width:\r\n                            returnData[returnData.length - 1].width + wordWidth,\r\n                    };\r\n                    spaceWidth += WHITESPACE * scale;\r\n                }\r\n            });\r\n        });\r\n\r\n        return returnData;\r\n    }\r\n\r\n    // End private functions\r\n\r\n    /**\r\n     * Creates and adds a new line of text\r\n     * @param line The properties of the line to be added\r\n     */\r\n    addLine(line: Omit<LineProps, 'ctx' | 'parent'>) {\r\n        const newLine = new Line({\r\n            ...line,\r\n            ctx: this.ctx,\r\n            parent: this,\r\n        });\r\n\r\n        this.lines.push(newLine);\r\n        this._lines.push(newLine);\r\n\r\n        return newLine;\r\n    }\r\n\r\n    removeLine(index?: number) {\r\n        if (index) {\r\n            const foundLine = this._lines[index];\r\n\r\n            if (foundLine) {\r\n                this._lines.splice(index, 1);\r\n\r\n                this.lines = this.lines.filter(\r\n                    line => line.id !== foundLine.id\r\n                );\r\n                this.drawnLines = this.drawnLines.filter(\r\n                    line => line.id !== foundLine.id\r\n                );\r\n            } else {\r\n                // TODO: Show proper warning\r\n                //console.warn();\r\n            }\r\n        } else {\r\n            const toRemove = this._lines[this._lines.length - 1];\r\n            this._lines.splice(this._lines.length - 1, 1);\r\n\r\n            this.lines = this.lines.filter(line => line.id !== toRemove.id);\r\n            this.drawnLines = this.drawnLines.filter(\r\n                line => line.id !== toRemove.id\r\n            );\r\n        }\r\n    }\r\n\r\n    getCursorPosition(position: number) {\r\n        let textCharCount = 0;\r\n        let charId = -1;\r\n        this.text.forEach((textLine, index) => {\r\n            if (index < textCharCount + textLine.length) {\r\n                charId = this.text[index][position - textCharCount].id;\r\n            } else {\r\n                textCharCount += textLine.length;\r\n            }\r\n        });\r\n\r\n        if (charId > -1) {\r\n            const letter = this.getLetterByCharacterId(charId);\r\n\r\n            if (letter) {\r\n                const line = letter.getParent('line', letter) as Line;\r\n\r\n                const xPosition =\r\n                    this.x + line.x + (letter.x + letter.width) * this.scale;\r\n                const yPosition = this.y + line.y;\r\n\r\n                console.log({\r\n                    x: xPosition,\r\n                    y: yPosition,\r\n                });\r\n                return {\r\n                    x: xPosition,\r\n                    y: yPosition,\r\n                };\r\n            } else {\r\n                console.warn('Letter not found');\r\n                return false;\r\n            }\r\n        } else {\r\n            console.warn('Character Not found');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    addLetter({\r\n        letter,\r\n        position,\r\n    }: {\r\n        letter: string;\r\n        position: number | number[];\r\n    }) {\r\n        // let textBlock: string[] = [];\r\n        // if (Array.isArray(position) && Array.isArray(this.textItem.text)) {\r\n        //     textBlock[position[0]] = `${this.textItem.text[position[0]].slice(\r\n        //         0,\r\n        //         position[1]\r\n        //     )}${letter}${this.textItem.text[position[0]].slice(position[1])}`;\r\n        // } else {\r\n        //     if (typeof position === 'number') {\r\n        //         textBlock = [\r\n        //             `${this.textItem.text+\" \".slice(\r\n        //                 0,\r\n        //                 position\r\n        //             )}${letter}${this.textItem.text+\" \".slice(position)}`,\r\n        //         ];\r\n        //     }\r\n        // }\r\n\r\n        const newChar = new VaraChar({\r\n            char: letter,\r\n            fontItem:\r\n                this.root.fontCharacters[letter.charCodeAt(0)] ||\r\n                this.root.fontCharacters['63'],\r\n            isSpace: letter === ' ',\r\n        });\r\n\r\n        if (typeof position === 'number') {\r\n            let textCharCount = 0;\r\n            this.text.forEach((textLine, index) => {\r\n                if (position <= textCharCount + textLine.length) {\r\n                    this.text[index] = [\r\n                        ...textLine.slice(0, position - textCharCount),\r\n                        newChar,\r\n                        ...textLine.slice(position - textCharCount),\r\n                    ];\r\n                } else {\r\n                    textCharCount += textLine.length;\r\n                }\r\n            });\r\n        }\r\n\r\n        const lines = this.generateLineData(this.text);\r\n\r\n        if (lines.length > this.getLineCount()) {\r\n            while (lines.length > this.getLineCount()) {\r\n                this.addLine({\r\n                    x: 0,\r\n                    y: 0,\r\n                });\r\n            }\r\n        }\r\n\r\n        this.getLastLine().addLetter({\r\n            character: newChar,\r\n            width: newChar.fontItem.w,\r\n            x: 0,\r\n            y: 0,\r\n        });\r\n\r\n        this.regeneratePositions(lines);\r\n    }\r\n\r\n    removeLetter({ position }: { position: number | number[] }) {\r\n        let charId = -1;\r\n\r\n        if (typeof position === 'number') {\r\n            let textCharCount = 0;\r\n            this.text.forEach((textLine, index) => {\r\n                if (position <= textCharCount + textLine.length) {\r\n                    if (position <= textCharCount + textLine.length) {\r\n                        charId = this.text[index][position - textCharCount].id;\r\n                        this.text[index].splice(position - textCharCount, 1);\r\n                    } else {\r\n                        textCharCount += textLine.length;\r\n                    }\r\n                } else {\r\n                    textCharCount += textLine.length;\r\n                }\r\n            });\r\n        }\r\n\r\n        const lines = this.generateLineData(this.text);\r\n\r\n        if (lines.length < this.getLineCount()) {\r\n            while (lines.length < this.getLineCount()) {\r\n                this.removeLine();\r\n            }\r\n        }\r\n\r\n        const letter = this.getAllLetters().find(\r\n            item => item.character.getId() === charId\r\n        );\r\n\r\n        if (letter) {\r\n            const line = letter.getParent('line', letter);\r\n\r\n            if (line) {\r\n                line.removeLetter(letter.id);\r\n            }\r\n        }\r\n\r\n        this.regeneratePositions(lines);\r\n    }\r\n\r\n    getAllLetters() {\r\n        const letters = this._lines.map(item => item.getAllLetters());\r\n        return letters.flat();\r\n    }\r\n\r\n    getLines() {\r\n        return this._lines;\r\n    }\r\n\r\n    getLineCount() {\r\n        return this._lines.length;\r\n    }\r\n\r\n    getLineAtIndex(index: number) {\r\n        return this._lines[index];\r\n    }\r\n\r\n    getLastLine() {\r\n        return this._lines[this._lines.length - 1];\r\n    }\r\n\r\n    getLetterByCharacterId(id: number) {\r\n        return (\r\n            this.getAllLetters().find(item => item.character.id === id) ?? false\r\n        );\r\n    }\r\n\r\n    setRenderFunction(\r\n        fn: (ctx: CanvasRenderingContext2D, rafTime: number) => void\r\n    ) {\r\n        this.userDefinedRenderFn = fn;\r\n    }\r\n\r\n    /**\r\n     * Remove the first line from the queue of lines. Used when a text line has been drawn completely.\r\n     *\r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.lines.shift();\r\n        if (removedItem) this.drawnLines.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the total path length\r\n     * @param pathLength Path length that is to be incremented or decrement\r\n     * @param action Whether to increment or decrement\r\n     */\r\n    modifyPathLength(\r\n        pathLength: number,\r\n        action: 'increment' | 'decrement' = 'increment'\r\n    ) {\r\n        if (action === 'increment') {\r\n            this.totalPathLength += pathLength;\r\n        } else {\r\n            this.totalPathLength -= pathLength;\r\n        }\r\n        return this.totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Render the block\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number) {\r\n        if (this.previousRAFTime === 0) {\r\n            this.previousRAFTime = rafTime;\r\n        }\r\n\r\n        this.ctx.save();\r\n        this.ctx.strokeStyle = this.options.color;\r\n        this.ctx.lineWidth = this.options.strokeWidth;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n\r\n        this.drawnLines.forEach(line => {\r\n            line.render(rafTime, this.previousRAFTime);\r\n        });\r\n\r\n        if (this.lines.length > 0) {\r\n            const line = this.lines[0];\r\n            if (line.isDone()) {\r\n                this.dequeue();\r\n            }\r\n            line.render(rafTime, this.previousRAFTime);\r\n        }\r\n        this.userDefinedRenderFn(this.ctx, rafTime);\r\n\r\n        this.ctx.restore();\r\n        this.previousRAFTime = rafTime;\r\n    }\r\n}\r\n","import {\r\n    VaraGeneralOptions,\r\n    VaraText,\r\n    VaraFontItem,\r\n    ObjectKeys,\r\n    VaraTextOptions,\r\n} from './types';\r\nimport Block from './utils/block';\r\n\r\nexport default class Vara {\r\n    elementName: string;\r\n    element: HTMLElement;\r\n    fontSource: string;\r\n    options: VaraGeneralOptions;\r\n    textItems: VaraText[];\r\n    blocks: Block[];\r\n    rendered: boolean;\r\n    defaultOptions: Required<VaraGeneralOptions>;\r\n    defaultCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    canvasWidth: number;\r\n    contextHeight: number;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    fontProperties!: {\r\n        s: number;\r\n        // TODO: add other properties\r\n        slc: 'round';\r\n        bsw: number;\r\n        lh: number;\r\n        space: number;\r\n        tf: number;\r\n    };\r\n    onDrawF?: () => void;\r\n    private readyfn?: () => void;\r\n\r\n    WHITESPACE: number;\r\n    SCALEBASE: number;\r\n\r\n    constructor(\r\n        elem: string,\r\n        fontSource: string,\r\n        text: VaraText[],\r\n        options: VaraGeneralOptions\r\n    ) {\r\n        this.elementName = elem;\r\n        this.element = document.querySelector(elem) as HTMLElement;\r\n        this.fontSource = fontSource;\r\n        this.options = options;\r\n        this.textItems = text;\r\n        this.blocks = [];\r\n        this.rendered = false;\r\n        this.fontCharacters = {};\r\n        this.canvasWidth = 0;\r\n\r\n        this.defaultOptions = {\r\n            fontSize: 21,\r\n            strokeWidth: 0.5,\r\n            color: '#000',\r\n            duration: 1000,\r\n            textAlign: 'left',\r\n            autoAnimation: true,\r\n            queued: true,\r\n            delay: 0,\r\n            breakWord: false,\r\n            letterSpacing: {\r\n                global: 0,\r\n            },\r\n            width: this.element.getBoundingClientRect().width,\r\n            lineHeight: 30,\r\n        };\r\n\r\n        this.defaultCharacters = {\r\n            '63': {\r\n                paths: [\r\n                    {\r\n                        w: 8.6437,\r\n                        h: 14.23173,\r\n                        my: 22.6665,\r\n                        mx: 0,\r\n                        dx: 0,\r\n                        d:\r\n                            'm 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85',\r\n                        pl: 1,\r\n                    },\r\n                    {\r\n                        w: 1.1037,\r\n                        h: 1.5498,\r\n                        my: 8.8815,\r\n                        dx: 0,\r\n                        mx: 1,\r\n                        d:\r\n                            'm 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z',\r\n                        pl: 1,\r\n                    },\r\n                ],\r\n                w: 8.6437,\r\n            },\r\n        };\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = this.element.getBoundingClientRect().width;\r\n        this.canvas.height = 800;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        this.element.appendChild(this.canvas);\r\n        this.WHITESPACE = 10;\r\n        this.SCALEBASE = 16;\r\n\r\n        this.contextHeight = 0;\r\n\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.normalizeOptions();\r\n\r\n        const xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', this.fontSource, true);\r\n        xmlhttp.onreadystatechange = () => {\r\n            if (xmlhttp.readyState === 4) {\r\n                if (xmlhttp.status === 200) {\r\n                    const contents = JSON.parse(xmlhttp.responseText);\r\n                    this.fontCharacters = contents.c;\r\n                    this.fontProperties = contents.p;\r\n                    this.preRender();\r\n                    if (this.readyfn) this.readyfn();\r\n                    this.render();\r\n                }\r\n            }\r\n        };\r\n        xmlhttp.send(null);\r\n    }\r\n\r\n    ready(fn: () => void) {\r\n        this.readyfn = fn;\r\n    }\r\n\r\n    onDraw(fn: () => void) {\r\n        this.onDrawF = fn;\r\n    }\r\n\r\n    /**\r\n     * Sets default option value for all existing option properties.\r\n     * If an option value is not provided, then it will first check if it is given in the global options, if not it will use the default option.\r\n     */\r\n    private normalizeOptions() {\r\n        this.options = this.options || {};\r\n\r\n        this.options = {\r\n            ...this.defaultOptions,\r\n            ...this.options,\r\n        };\r\n\r\n        Object.keys(this.defaultCharacters).forEach(character => {\r\n            if (this.fontCharacters[character] === undefined) {\r\n                this.fontCharacters[character] = this.defaultCharacters[\r\n                    character\r\n                ];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs some actions before rendering starts. These include finding the pathLength of each path and generating the render data.\r\n     */\r\n    private preRender() {\r\n        let svg = this.createSVGNode('svg', {\r\n            width: '100',\r\n            height: '100',\r\n        });\r\n        svg.style.position = 'absolute';\r\n        svg.style.zIndex = '-100';\r\n        svg.style.opacity = '0';\r\n        svg.style.top = '0';\r\n\r\n        document.body.appendChild(svg);\r\n        let svgPathData = this.createSVGNode('path', {\r\n            d: '',\r\n        }) as SVGPathElement;\r\n        svg.appendChild(svgPathData);\r\n\r\n        this.objectKeys(this.fontCharacters).forEach(char => {\r\n            this.fontCharacters[char].paths.forEach((path, i) => {\r\n                svgPathData.setAttributeNS(null, 'd', path.d);\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].dx = svgPathData.getBoundingClientRect().x;\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].pl = svgPathData.getTotalLength();\r\n            });\r\n        });\r\n\r\n        this.textItems.forEach(item => {\r\n            const block = new Block({\r\n                root: this,\r\n                options: {\r\n                    ...(this.options as Required<VaraTextOptions>),\r\n                    ...item,\r\n                },\r\n                ctx: this.ctx,\r\n            });\r\n\r\n            this.blocks.push(block);\r\n        });\r\n    }\r\n\r\n    private render(rafTime = 0) {\r\n        let canvasHeight = this.calculateCanvasHeight();\r\n        if (canvasHeight !== this.canvas.height) {\r\n            this.canvas.height = canvasHeight;\r\n        }\r\n        this.ctx.clearRect(0, 0, this.canvas.width, canvasHeight);\r\n\r\n        this.blocks.forEach(item => {\r\n            item.render(rafTime);\r\n        });\r\n\r\n        window.requestAnimationFrame(time => this.render(time));\r\n    }\r\n\r\n    // TODO: Make proper calculation function.\r\n    calculateCanvasHeight() {\r\n        let height = 0;\r\n        this.blocks.forEach(item => {\r\n            if (item.height && item.options.y) {\r\n                height += item.height + item.options.y;\r\n            }\r\n        });\r\n        return height + 50;\r\n    }\r\n\r\n    addLetter({\r\n        letter,\r\n        id,\r\n        position,\r\n    }: {\r\n        letter: string;\r\n        id: string;\r\n        position: number;\r\n    }) {\r\n        const block = this.blocks.find(item => item.options.id === id);\r\n        block?.addLetter({ letter, position });\r\n        // if(block) {\r\n        //     block.\r\n        // }\r\n    }\r\n\r\n    removeLetter({ id, position }: { id: string; position: number }) {\r\n        const block = this.blocks.find(item => item.options.id === id);\r\n\r\n        block?.removeLetter({ position });\r\n        // if(block) {\r\n        //     block.\r\n        // }\r\n    }\r\n\r\n    getCursorPosition({ position, id }: { position: number; id: string }) {\r\n        const block = this.blocks.find(item => item.options.id === id);\r\n\r\n        return block?.getCursorPosition(position);\r\n    }\r\n\r\n    setRenderFunction(id: string, fn: (ctx: CanvasRenderingContext2D) => void) {\r\n        const block = this.blocks.find(item => item.options.id === id);\r\n        return block?.setRenderFunction(fn);\r\n    }\r\n\r\n    /**\r\n     * Creates and returns an SVG element\r\n     * @param n The name of the SVG node to be created\r\n     * @param v The attributes of the node\r\n     */\r\n\r\n    createSVGNode(n: string, v: { [x: string]: string }) {\r\n        const e = document.createElementNS('http://www.w3.org/2000/svg', n);\r\n        for (var p in v)\r\n            e.setAttributeNS(\r\n                null,\r\n                p.replace(/[A-Z]/g, function(m) {\r\n                    return '-' + m.toLowerCase();\r\n                }),\r\n                v[p]\r\n            );\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Modifies the move to command of a given path and returns it.\r\n     * @param path The path \"d\" property\r\n     * @param x The x co-ordinate\r\n     * @param y The y co-ordinate\r\n     */\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + 1 + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n\r\n    objectKeys<T>(x: T) {\r\n        let keys = Object.keys(x) as ObjectKeys<T>;\r\n        return keys;\r\n    }\r\n\r\n    boundRect(x: number, y: number, w: number, h = 10) {\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = 'rgba(209, 56, 61,0.4)';\r\n        this.ctx.fillRect(x, y, w, h);\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\nif (window) {\r\n    (window as any).Vara = Vara;\r\n}\r\n"],"names":["varaCharId","VaraChar","props","fontItem","isSpace","id","getFontItem","getId","SCALEBASE","WHITESPACE","BLOCK_COMPOSITION","RenderBase","ctx","parent","name","getParent","parentName","current","parentIndex","indexOf","currentItemIndex","LetterPart","x","y","path","pathLength","dashOffset","width","rootBlock","paint","save","stroke","Path2D","processPath","restore","draw","delta","pathDuration","totalPathLength","options","duration","speed","lineDashOffset","setLineDash","svgPath","split","join","letterId","Letter","parts","drawnParts","character","setPosition","addPart","part","push","modifyPathLength","setParent","isDone","length","dequeue","removedItem","shift","render","rafTime","previousRAFTime","scale","translate","forEach","drawnPart","lineId","Line","letters","drawnLetters","_letters","addLetter","letter","newLetter","paths","d","mx","dx","my","pl","w","removeLetter","filter","setLetters","getAllLetters","prevRAFTime","currentLetter","Block","height","lines","_lines","drawnLines","text","fontSize","root","userDefinedRenderFn","initTextToVaraChar","generatePositions","map","fontCharacters","charCodeAt","Array","isArray","line","regeneratePositions","top","lineHeight","lettersToSetInLine","lineIndex","left","textAlign","lineClass","getLineAtIndex","lettersToSet","char","foundLetter","getLetterByCharacterId","console","error","getLines","generateLineData","log","addLine","returnData","wordSplittedLines","l","spaceWidth","word","wordWidth","pathPositionCorrection","reduce","a","c","newLine","removeLine","index","foundLine","splice","toRemove","getCursorPosition","position","textCharCount","charId","textLine","xPosition","yPosition","warn","newChar","slice","getLineCount","getLastLine","find","item","flat","setRenderFunction","fn","action","strokeStyle","color","lineWidth","strokeWidth","lineCap","lineJoin","Vara","elem","fontSource","elementName","element","document","querySelector","textItems","blocks","rendered","canvasWidth","defaultOptions","autoAnimation","queued","delay","breakWord","letterSpacing","global","getBoundingClientRect","defaultCharacters","h","canvas","createElement","getContext","appendChild","contextHeight","init","normalizeOptions","xmlhttp","XMLHttpRequest","open","onreadystatechange","readyState","status","contents","JSON","parse","responseText","fontProperties","p","preRender","readyfn","send","ready","onDraw","onDrawF","Object","keys","undefined","svg","createSVGNode","style","zIndex","opacity","body","svgPathData","objectKeys","i","setAttributeNS","getTotalLength","block","canvasHeight","calculateCanvasHeight","clearRect","window","requestAnimationFrame","time","n","v","e","createElementNS","replace","m","toLowerCase","boundRect","fillStyle","fillRect","fill"],"mappings":"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"}
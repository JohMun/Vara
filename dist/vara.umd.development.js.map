{"version":3,"file":"vara.umd.development.js","sources":["../src/utils/constants.ts","../src/types.ts","../src/utils/renderbase.ts","../src/utils/letterpart.ts","../src/utils/letter.ts","../src/utils/line.ts","../src/utils/block.ts","../src/utils/renderitem.ts","../src/index.ts"],"sourcesContent":["export const SCALEBASE = 16;\r\nexport const WHITESPACE = 10;","import Block from \"./utils/block\";\r\nimport Letter from \"./utils/letter\";\r\nimport LetterPart from \"./utils/letterpart\";\r\nimport Line from \"./utils/line\";\r\nimport RenderItem from \"./utils/renderitem\";\r\n\r\nexport type VaraGeneralOptions = {\r\n    fontSize?: number;\r\n    strokeWidth?: number;\r\n    color?: string;\r\n    duration?: number;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    autoAnimation?: boolean;\r\n    queued?: boolean;\r\n    delay?: number;\r\n    letterSpacing?:\r\n        | {\r\n              [x: string]: number;\r\n          }\r\n        | number;\r\n    breakWord?: boolean;\r\n    width?: number;\r\n    lineHeight?: number;\r\n};\r\n\r\nexport type VaraTextOptions = VaraGeneralOptions & {\r\n    id?: string | number | false;\r\n    x?: number;\r\n    y?: number;\r\n    absolutePosition?: boolean;\r\n};\r\n\r\nexport type VaraText = VaraTextOptions & {\r\n    text: string;\r\n};\r\n\r\nexport type RenderData = RenderItem[];\r\n\r\nexport type VaraFontItem = {\r\n    paths: Array<{\r\n        w: number;\r\n        h: number;\r\n        my: number;\r\n        mx: number;\r\n        dx: number;\r\n        d: string;\r\n        pl: number;\r\n    }>;\r\n    w: number;\r\n};\r\n\r\nexport type ObjectKeys<T> = T extends object\r\n    ? (keyof T)[]\r\n    : T extends number\r\n    ? []\r\n    : T extends Array<any> | string\r\n    ? string[]\r\n    : never;\r\n\r\nexport const BLOCK_COMPOSITION = [\"block\",\"line\",\"letter\",\"letterPart\"] as const;\r\n\r\nexport type BlockComposition = typeof BLOCK_COMPOSITION;\r\n\r\nexport type BlockName = BlockComposition[number];\r\n\r\nexport type Blocks = Block | Line | Letter | LetterPart;\r\n\r\nexport type BlockMapped = {\r\n    \"block\" : Block,\r\n    \"line\": Line,\r\n    \"letter\": Letter,\r\n    \"letterPart\": LetterPart\r\n}","import { BlockMapped, BlockName, Blocks, BLOCK_COMPOSITION } from '../types';\r\n\r\ninterface RenderItemProps {\r\n    ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks;\r\n}\r\n\r\nexport default class RenderBase {\r\n    ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks | null;\r\n    name: BlockName;\r\n\r\n    constructor(props: RenderItemProps) {\r\n        this.ctx = props.ctx;\r\n        this.parent = props.parent ?? null;\r\n        this.name = 'block';\r\n    }\r\n\r\n    getParent<T extends BlockName>(parentName: T, current: Blocks): BlockMapped[T] | false {\r\n        const parentIndex = BLOCK_COMPOSITION.indexOf(parentName);\r\n        const currentItemIndex = BLOCK_COMPOSITION.indexOf(this.name);\r\n        if (parentIndex < currentItemIndex) {\r\n            if (current.name === parentName) {\r\n                return current as BlockMapped[T];\r\n            } else {\r\n                if (current.parent)\r\n                    return this.getParent(parentName, current?.parent);\r\n                else return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","import { BlockName } from '../types';\r\nimport Block from './block';\r\nimport Letter from './letter';\r\nimport RenderBase from './renderbase';\r\n\r\nexport interface LetterPartProps {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Letter;\r\n}\r\n\r\nexport default class LetterPart extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    name: BlockName;\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterPartProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.path = props.path;\r\n        this.pathLength = props.pathLength;\r\n        this.dashOffset = props.dashOffset;\r\n        this.width = props.width;\r\n\r\n        this.name = 'letterPart';\r\n\r\n        this.rootBlock = this.getParent('block', this) as Block;\r\n    }\r\n\r\n    /**\r\n     * Paints the path\r\n     */\r\n    paint() {\r\n        // console.log(this.x,this.y);\r\n        this.ctx.save();\r\n        this.ctx.stroke(\r\n            new Path2D(this.processPath(this.path, this.x, this.y))\r\n        );\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Increments the dashOffset and then paints the path.\r\n     */\r\n    draw(delta: number) {\r\n        const pathDuration =\r\n            ((this.pathLength / this.rootBlock.totalPathLength) *\r\n                this.rootBlock.options.duration) /\r\n            1000;\r\n\r\n        const speed = this.pathLength / pathDuration;\r\n\r\n        this.ctx.save();\r\n        this.ctx.lineDashOffset = 1;\r\n        this.ctx.setLineDash([this.dashOffset, this.pathLength + 1]);\r\n        this.dashOffset += speed * delta;\r\n        this.paint();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n}\r\n","import { BlockName } from \"../types\";\r\nimport Block from \"./block\";\r\nimport LetterPart, { LetterPartProps } from \"./letterpart\";\r\nimport Line from \"./line\";\r\nimport RenderBase from \"./renderbase\";\r\n\r\nexport interface LetterProps {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Line;\r\n}\r\n\r\nexport default class Letter extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n\r\n    parts: LetterPart[];\r\n\r\n    drawnParts: LetterPart[];\r\n    name: BlockName;\r\n\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.width = props.width;\r\n        this.parts = [];\r\n        this.drawnParts = [];\r\n        this.name = \"letter\"\r\n\r\n        this.rootBlock = this.getParent(\"block\", this) as Block;\r\n    }\r\n\r\n    setPosition(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Add a new part to the queue\r\n     * @param part The part to be added\r\n     */\r\n    addPart(part: Omit<LetterPartProps,\"ctx\"|\"parent\">) {\r\n        this.parts.push(new LetterPart({\r\n            ...part,\r\n            ctx: this.ctx,\r\n            parent: this,\r\n        }));\r\n    \r\n        \r\n        // Update the total path length stored in the main block.\r\n        if(this.rootBlock){\r\n            this.rootBlock.modifyPathLength(part.pathLength, \"increment\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a part has been drawn completely.\r\n     * \r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.parts.shift();\r\n        if (removedItem) this.drawnParts.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current letter\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, previousRAFTime: number) {\r\n\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale, this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        const delta = (rafTime - previousRAFTime) / 1000;\r\n\r\n        if (this.parts.length > 0) {\r\n            const part = this.parts[0];\r\n            if (part.dashOffset > part.pathLength) {\r\n                this.dequeue();\r\n            } else {\r\n                part.draw(delta);\r\n            }\r\n        }\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        })\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n\r\n    /**\r\n     * Paints the paths whose animations are complete\r\n     */\r\n    paint() {\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale,this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        })\r\n\r\n        this.ctx.restore();\r\n    }\r\n}","import { BlockName } from \"../types\";\r\nimport Block from \"./block\";\r\nimport Letter, { LetterProps } from \"./letter\";\r\nimport RenderBase from \"./renderbase\";\r\n\r\nexport interface LineProps {\r\n    x: number;\r\n    y: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Block;\r\n}\r\n\r\nexport default class Line extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    letters: Letter[];\r\n    drawnLetters: Letter[];\r\n    name: BlockName;\r\n\r\n    constructor(props: LineProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.ctx = props.ctx;\r\n        this.letters = [];\r\n        this.drawnLetters = [];\r\n        this.name = \"line\";\r\n    }\r\n\r\n    addLetter(letter: Omit<LetterProps, \"ctx\"|\"parent\">) {\r\n        console.log('adding letter', this.name);\r\n        const newLetter = new Letter({\r\n            ...letter,\r\n            parent: this,\r\n            ctx: this.ctx\r\n        })\r\n        this.letters.push(newLetter);\r\n\r\n        return newLetter;\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a letter has been drawn completely.\r\n     * The removed item is moved to the drawnLetters array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.letters.shift();\r\n        if (removedItem) this.drawnLetters.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current line\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, prevRAFTime: number){\r\n        this.ctx.save();\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        if(this.letters.length > 0) {\r\n            const currentLetter = this.letters[0];\r\n            currentLetter.render(rafTime, prevRAFTime);\r\n\r\n            if(currentLetter.parts.length === 0) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n\r\n        this.drawnLetters.forEach(letter => {\r\n            letter.paint();\r\n        })\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    paint() {\r\n        this.ctx.save();\r\n        this.ctx.translate(this.x, this.y);\r\n        this.drawnLetters.forEach(letter => {\r\n            letter.paint();\r\n        })\r\n        this.ctx.restore();\r\n    }\r\n}","import { BlockName, VaraText } from '../types';\r\nimport { SCALEBASE } from './constants';\r\nimport Line, { LineProps } from './line';\r\nimport RenderBase from './renderbase';\r\n\r\ninterface BlockProps {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    options: Required<VaraText>;\r\n}\r\n\r\nexport default class Block extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    scale: number;\r\n\r\n    ctx: CanvasRenderingContext2D;\r\n    previousRAFTime: number;\r\n    lines: Line[];\r\n    drawnLines: Line[];\r\n    totalPathLength: number;\r\n    options: Required<VaraText>;\r\n\r\n    name: BlockName;\r\n\r\n    constructor(props: BlockProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.width = props.width;\r\n\r\n        this.lines = [];\r\n        this.drawnLines = [];\r\n        this.ctx = props.ctx;\r\n        this.previousRAFTime = 0;\r\n        this.totalPathLength = 0;\r\n        this.options = props.options;\r\n\r\n        this.name = 'block';\r\n\r\n        this.scale = props.options.fontSize / SCALEBASE;\r\n    }\r\n\r\n    /**\r\n     * Creates and adds a new line of text\r\n     * @param line The properties of the line to be added\r\n     */\r\n    addLine(line: Omit<LineProps, 'ctx' | 'parent'>) {\r\n        const newLine = new Line({\r\n            ...line,\r\n            ctx: this.ctx,\r\n            parent: this,\r\n        });\r\n\r\n        this.lines.push(newLine);\r\n\r\n        return newLine;\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a text line has been drawn completely.\r\n     * \r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.lines.shift();\r\n        if (removedItem) this.lines.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the total path length\r\n     * @param pathLength Path length that is to be incremented or decrement\r\n     * @param action Whether to increment or decrement\r\n     */\r\n    modifyPathLength(\r\n        pathLength: number,\r\n        action: 'increment' | 'decrement' = 'increment'\r\n    ) {\r\n        if (action === 'increment') {\r\n            this.totalPathLength += pathLength;\r\n        } else {\r\n            this.totalPathLength -= pathLength;\r\n        }\r\n        return this.totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Render the block\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number) {\r\n        if (this.previousRAFTime === 0) {\r\n            this.previousRAFTime = rafTime;\r\n        }\r\n\r\n        this.ctx.save();\r\n        this.ctx.strokeStyle = this.options.color;\r\n        this.ctx.lineWidth = this.options.strokeWidth;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n\r\n\r\n        this.drawnLines.forEach(line => {\r\n            line.paint();\r\n        });\r\n\r\n        if(this.lines.length > 0) {\r\n            const line = this.lines[0];\r\n            line.render(rafTime, this.previousRAFTime);\r\n            if(line.letters.length === 0) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n        this.ctx.restore();\r\n\r\n        this.previousRAFTime = rafTime;\r\n    }\r\n}\r\n","import { VaraFontItem, VaraText, VaraTextOptions } from '../types';\r\nimport Block from './block';\r\nimport { SCALEBASE, WHITESPACE } from './constants';\r\n\r\ninterface RenderItemProps {\r\n    textItem: VaraText;\r\n    options: Required<VaraTextOptions>;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    ctx: CanvasRenderingContext2D;\r\n}\r\n\r\nexport default class RenderItem {\r\n    textItem: Required<VaraText>;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    ctx: CanvasRenderingContext2D;\r\n    block: Block | null;\r\n    height: number;\r\n\r\n    constructor(props: RenderItemProps) {\r\n        this.textItem = {\r\n            ...props.options,\r\n            ...props.textItem,\r\n        };\r\n        console.log(this.textItem);\r\n        this.height = 0;\r\n        this.fontCharacters = props.fontCharacters;\r\n        this.ctx = props.ctx;\r\n        this.block = null;\r\n    }\r\n\r\n    generatePositions() {\r\n        let scale = this.textItem.fontSize / SCALEBASE;\r\n        this.height = 0;\r\n        // TODO: Create non breaking text\r\n        if (!this.textItem.breakWord) {\r\n            const textBlock =\r\n                typeof this.textItem.text === 'string'\r\n                    ? [this.textItem.text]\r\n                    : this.textItem.text;\r\n\r\n            const breakedTextBlock = textBlock.map(line => {\r\n                return line.split(' ');\r\n            });\r\n\r\n            const lines: {\r\n                text: string;\r\n                width: number;\r\n            }[] = [\r\n                {\r\n                    text: '',\r\n                    width: 0,\r\n                },\r\n            ];\r\n\r\n            breakedTextBlock.forEach(line => {\r\n                let spaceWidth = 0;\r\n                line.forEach(word => {\r\n                    let wordWidth = 0;\r\n\r\n                    word.split('').forEach(letter => {\r\n                        const charCode = letter.charCodeAt(0);\r\n\r\n                        const currentLetter =\r\n                            this.fontCharacters[charCode] ||\r\n                            this.fontCharacters['63'];\r\n                        let pathPositionCorrection = currentLetter.paths.reduce(\r\n                            (a, c) => a + c.mx - c.dx,\r\n                            0\r\n                        );\r\n                        wordWidth +=\r\n                            (currentLetter.w + pathPositionCorrection) * scale;\r\n                    });\r\n\r\n                    if (\r\n                        lines[lines.length - 1].width +\r\n                            wordWidth +\r\n                            5 * scale +\r\n                            spaceWidth +\r\n                            this.textItem.x * scale >\r\n                        this.textItem.width\r\n                    ) {\r\n                        lines.push({\r\n                            text: word + ' ',\r\n                            width: wordWidth,\r\n                        });\r\n                        spaceWidth = 0;\r\n                    } else {\r\n                        lines[lines.length - 1] = {\r\n                            text: lines[lines.length - 1].text + word,\r\n                            width: lines[lines.length - 1].width + wordWidth,\r\n                        };\r\n                        spaceWidth += WHITESPACE * scale;\r\n                        lines[lines.length - 1].text += ' ';\r\n                    }\r\n                });\r\n            });\r\n\r\n            let top = this.textItem.lineHeight;\r\n\r\n            const block = new Block({\r\n                width: this.textItem.width,\r\n                x: this.textItem.x,\r\n                y: this.textItem.y,\r\n                ctx: this.ctx,\r\n                options: this.textItem,\r\n            });\r\n\r\n            lines.forEach(line => {\r\n                let left = 0;\r\n                let x = 0,\r\n                    y = 0;\r\n                if (this.textItem.textAlign === 'center') {\r\n                    x = (this.textItem.width - line.width) / 2;\r\n                }\r\n\r\n                const lineClass = block.addLine({\r\n                    x,\r\n                    y,\r\n                });\r\n\r\n                line.text.split('').forEach(letter => {\r\n                    console.log(letter);\r\n                    if (letter === ' ') {\r\n                        left += WHITESPACE;\r\n                    } else {\r\n                        const currentLetter =\r\n                            this.fontCharacters[letter.charCodeAt(0)] ||\r\n                            this.fontCharacters['63'];\r\n\r\n                        const letterClass = lineClass.addLetter({\r\n                            x: left,\r\n                            y: top,\r\n                            width: currentLetter.w,\r\n                        });\r\n\r\n                        currentLetter.paths.forEach(path => {\r\n                            letterClass.addPart({\r\n                                path: path.d,\r\n                                x: path.mx - path.dx,\r\n                                y: -path.my,\r\n                                pathLength: path.pl,\r\n                                dashOffset: 0,\r\n                                width: path.w,\r\n                            });\r\n                        });\r\n                        left += currentLetter.w;\r\n                    }\r\n                });\r\n                top += this.textItem.lineHeight;\r\n                this.height += this.textItem.lineHeight * scale;\r\n            });\r\n\r\n            this.block = block;\r\n        }\r\n    }\r\n\r\n    render(rafTime:number){\r\n        if(this.block) {\r\n            this.block.render(rafTime);\r\n        }\r\n    }\r\n\r\n    rendered() {\r\n        return this.block?.lines.length === 0;\r\n    }\r\n}\r\n","import {\r\n    VaraGeneralOptions,\r\n    VaraText,\r\n    RenderData,\r\n    VaraFontItem,\r\n    ObjectKeys,\r\n    VaraTextOptions,\r\n} from './types';\r\nimport RenderItem from './utils/renderitem';\r\n\r\nexport default class Vara {\r\n    elementName: string;\r\n    element: HTMLElement;\r\n    fontSource: string;\r\n    options: VaraGeneralOptions;\r\n    textItems: VaraText[];\r\n    renderData: {\r\n        queued: RenderData;\r\n        nonQueued: RenderData;\r\n    };\r\n    rendered: boolean;\r\n    defaultOptions: Required<VaraGeneralOptions>;\r\n    defaultCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    canvasWidth: number;\r\n    contextHeight: number;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    fontProperties!: {\r\n        s: number;\r\n        // TODO: add other properties\r\n        slc: 'round';\r\n        bsw: number;\r\n        lh: number;\r\n        space: number;\r\n        tf: number;\r\n    };\r\n    onDrawF?: (fn?: Required<RenderData>) => void;\r\n    WHITESPACE: number;\r\n    SCALEBASE: number;\r\n\r\n    constructor(\r\n        elem: string,\r\n        fontSource: string,\r\n        text: VaraText[],\r\n        options: VaraGeneralOptions\r\n    ) {\r\n        this.elementName = elem;\r\n        this.element = document.querySelector(elem) as HTMLElement;\r\n        this.fontSource = fontSource;\r\n        this.options = options;\r\n        this.textItems = text;\r\n        this.renderData = {\r\n            nonQueued: [],\r\n            queued: [],\r\n        };\r\n        this.rendered = false;\r\n        this.fontCharacters = {};\r\n        this.canvasWidth = 0;\r\n\r\n        this.defaultOptions = {\r\n            fontSize: 21,\r\n            strokeWidth: 0.5,\r\n            color: '#000',\r\n            duration: 1000,\r\n            textAlign: 'left',\r\n            autoAnimation: true,\r\n            queued: true,\r\n            delay: 0,\r\n            breakWord: false,\r\n            letterSpacing: {\r\n                global: 0,\r\n            },\r\n            width: this.element.getBoundingClientRect().width,\r\n            lineHeight: 30,\r\n        };\r\n\r\n        this.defaultCharacters = {\r\n            '63': {\r\n                paths: [\r\n                    {\r\n                        w: 8.6437,\r\n                        h: 14.23173,\r\n                        my: 22.6665,\r\n                        mx: 0,\r\n                        dx: 0,\r\n                        d:\r\n                            'm 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85',\r\n                        pl: 1,\r\n                    },\r\n                    {\r\n                        w: 1.1037,\r\n                        h: 1.5498,\r\n                        my: 8.8815,\r\n                        dx: 0,\r\n                        mx: 1,\r\n                        d:\r\n                            'm 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z',\r\n                        pl: 1,\r\n                    },\r\n                ],\r\n                w: 8.6437,\r\n            },\r\n        };\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = 800;\r\n        this.canvas.height = 800;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        this.element.appendChild(this.canvas);\r\n        this.WHITESPACE = 10;\r\n        this.SCALEBASE = 16;\r\n\r\n        this.contextHeight = 0;\r\n\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.normalizeOptions();\r\n\r\n        const xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', this.fontSource, true);\r\n        xmlhttp.onreadystatechange = () => {\r\n            if (xmlhttp.readyState == 4) {\r\n                if (xmlhttp.status == 200) {\r\n                    const contents = JSON.parse(xmlhttp.responseText);\r\n                    this.fontCharacters = contents.c;\r\n                    this.fontProperties = contents.p;\r\n                    this.preRender();\r\n                    this.render();\r\n                }\r\n            }\r\n        };\r\n        xmlhttp.send(null);\r\n    }\r\n\r\n    onDraw(fn: (a?: Required<RenderData>) => void) {\r\n        this.onDrawF = fn;\r\n    }\r\n\r\n    /**\r\n     * Sets default option value for all existing option properties.\r\n     * If an option value is not provided, then it will first check if it is given in the global options, if not it will use the default option.\r\n     */\r\n    private normalizeOptions() {\r\n        this.options = this.options || {};\r\n\r\n        this.options = {\r\n            ...this.defaultOptions,\r\n            ...this.options,\r\n        };\r\n\r\n        Object.keys(this.defaultCharacters).forEach(character => {\r\n            if (this.fontCharacters[character] === undefined) {\r\n                this.fontCharacters[character] = this.defaultCharacters[\r\n                    character\r\n                ];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs some actions before rendering starts. These include finding the pathLength of each path and generating the render data.\r\n     */\r\n    private preRender() {\r\n        let svg = this.createSVGNode('svg', {\r\n            width: '100',\r\n            height: '100',\r\n        });\r\n        svg.style.position = 'absolute';\r\n        svg.style.zIndex = '-100';\r\n        svg.style.opacity = '0';\r\n        svg.style.top = '0';\r\n\r\n        document.body.appendChild(svg);\r\n        let svgPathData = this.createSVGNode('path', {\r\n            d: '',\r\n        }) as SVGPathElement;\r\n        svg.appendChild(svgPathData);\r\n\r\n        this.objectKeys(this.fontCharacters).forEach(char => {\r\n            this.fontCharacters[char].paths.forEach((path, i) => {\r\n                svgPathData.setAttributeNS(null, 'd', path.d);\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].dx = svgPathData.getBoundingClientRect().x;\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].pl = svgPathData.getTotalLength();\r\n            });\r\n        });\r\n\r\n        this.textItems.forEach(item => {\r\n            const renderItem = new RenderItem({\r\n                fontCharacters: this.fontCharacters,\r\n                options: this.options as Required<VaraTextOptions>,\r\n                textItem: item,\r\n                ctx: this.ctx,\r\n            });\r\n\r\n            renderItem.generatePositions();\r\n\r\n            if (item.queued) {\r\n                this.renderData.queued.push(renderItem);\r\n            } else {\r\n                this.renderData.nonQueued.push(renderItem);\r\n            }\r\n        });\r\n    }\r\n\r\n    private render(rafTime = 0) {\r\n        let canvasHeight = this.calculateCanvasHeight();\r\n        if (canvasHeight !== this.canvas.height) {\r\n            this.canvas.height = canvasHeight;\r\n        }\r\n        this.ctx.clearRect(0, 0, this.canvas.width, canvasHeight);\r\n\r\n        this.renderData.nonQueued.forEach(item => {\r\n            item.render(rafTime);\r\n        });\r\n\r\n        if (this.renderData.queued.length > 0) {\r\n            const queueHead = this.renderData.queued[0];\r\n            queueHead.render(rafTime);\r\n            if (queueHead.rendered()) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n\r\n        window.requestAnimationFrame(time => this.render(time));\r\n    }\r\n    \r\n    /**\r\n     * Remove the first item from the queue. Used when a block has been drawn completely.\r\n     * The removed item is moved to the drawnLetters array\r\n     */\r\n    private dequeue() {\r\n        const removedItem = this.renderData.queued.shift();\r\n        if (removedItem) this.renderData.nonQueued.push(removedItem);\r\n    }\r\n\r\n    // TODO: Make proper calculation function.\r\n    calculateCanvasHeight() {\r\n        let height = 0;\r\n        [...this.renderData.nonQueued, ...this.renderData.queued].forEach(\r\n            item => {\r\n                if (item.height && item.textItem.y) {\r\n                    height += item.height + item.textItem.y;\r\n                }\r\n            }\r\n        );\r\n        return height + 50;\r\n    }\r\n\r\n    /**\r\n     * Creates and returns an SVG element\r\n     * @param n The name of the SVG node to be created\r\n     * @param v The attributes of the node\r\n     */\r\n\r\n    createSVGNode(n: string, v: { [x: string]: string }) {\r\n        const e = document.createElementNS('http://www.w3.org/2000/svg', n);\r\n        for (var p in v)\r\n            e.setAttributeNS(\r\n                null,\r\n                p.replace(/[A-Z]/g, function(m) {\r\n                    return '-' + m.toLowerCase();\r\n                }),\r\n                v[p]\r\n            );\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Modifies the move to command of a given path and returns it.\r\n     * @param path The path \"d\" property\r\n     * @param x The x co-ordinate\r\n     * @param y The y co-ordinate\r\n     */\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + 1 + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n\r\n    objectKeys<T>(x: T) {\r\n        let keys = Object.keys(x) as ObjectKeys<T>;\r\n        return keys;\r\n    }\r\n\r\n    boundRect(x: number, y: number, w: number, h = 10) {\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = 'rgba(209, 56, 61,0.4)';\r\n        this.ctx.fillRect(x, y, w, h);\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\nif (window) {\r\n    (<any>window).Vara = Vara;\r\n}\r\n"],"names":["SCALEBASE","WHITESPACE","BLOCK_COMPOSITION","RenderBase","props","ctx","parent","name","getParent","parentName","current","parentIndex","indexOf","currentItemIndex","LetterPart","x","y","path","pathLength","dashOffset","width","rootBlock","paint","save","stroke","Path2D","processPath","restore","draw","delta","pathDuration","totalPathLength","options","duration","speed","lineDashOffset","setLineDash","svgPath","split","join","Letter","parts","drawnParts","setPosition","addPart","part","push","modifyPathLength","dequeue","removedItem","shift","render","rafTime","previousRAFTime","scale","translate","length","forEach","drawnPart","Line","letters","drawnLetters","addLetter","letter","console","log","newLetter","prevRAFTime","currentLetter","Block","lines","drawnLines","fontSize","addLine","line","newLine","action","strokeStyle","color","lineWidth","strokeWidth","lineCap","lineJoin","RenderItem","textItem","height","fontCharacters","block","generatePositions","breakWord","textBlock","text","breakedTextBlock","map","spaceWidth","word","wordWidth","charCode","charCodeAt","pathPositionCorrection","paths","reduce","a","c","mx","dx","w","top","lineHeight","left","textAlign","lineClass","letterClass","d","my","pl","rendered","Vara","elem","fontSource","elementName","element","document","querySelector","textItems","renderData","nonQueued","queued","canvasWidth","defaultOptions","autoAnimation","delay","letterSpacing","global","getBoundingClientRect","defaultCharacters","h","canvas","createElement","getContext","appendChild","contextHeight","init","normalizeOptions","xmlhttp","XMLHttpRequest","open","onreadystatechange","readyState","status","contents","JSON","parse","responseText","fontProperties","p","preRender","send","onDraw","fn","onDrawF","Object","keys","character","undefined","svg","createSVGNode","style","position","zIndex","opacity","body","svgPathData","objectKeys","char","i","setAttributeNS","getTotalLength","item","renderItem","canvasHeight","calculateCanvasHeight","clearRect","queueHead","window","requestAnimationFrame","time","n","v","e","createElementNS","replace","m","toLowerCase","boundRect","fillStyle","fillRect","fill"],"mappings":"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"}
{"version":3,"file":"vara.umd.development.js","sources":["../src/utils/constants.ts","../src/types.ts","../src/utils/renderbase.ts","../src/utils/letterpart.ts","../src/utils/letter.ts","../src/utils/line.ts","../src/utils/block.ts","../src/utils/char.ts","../src/utils/renderitem.ts","../src/index.ts"],"sourcesContent":["export const SCALEBASE = 16;\r\nexport const WHITESPACE = 10;","import Block from \"./utils/block\";\r\nimport Letter from \"./utils/letter\";\r\nimport LetterPart from \"./utils/letterpart\";\r\nimport Line from \"./utils/line\";\r\nimport RenderItem from \"./utils/renderitem\";\r\n\r\nexport type VaraGeneralOptions = {\r\n    fontSize?: number;\r\n    strokeWidth?: number;\r\n    color?: string;\r\n    duration?: number;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    autoAnimation?: boolean;\r\n    queued?: boolean;\r\n    delay?: number;\r\n    letterSpacing?:\r\n        | {\r\n              [x: string]: number;\r\n          }\r\n        | number;\r\n    breakWord?: boolean;\r\n    width?: number;\r\n    lineHeight?: number;\r\n};\r\n\r\nexport type VaraTextOptions = VaraGeneralOptions & {\r\n    id?: string | number | false;\r\n    x?: number;\r\n    y?: number;\r\n    absolutePosition?: boolean;\r\n};\r\n\r\nexport type VaraText = VaraTextOptions & {\r\n    text: string | string[];\r\n};\r\n\r\nexport type RenderData = RenderItem[];\r\n\r\nexport type VaraFontItem = {\r\n    paths: Array<{\r\n        w: number;\r\n        h: number;\r\n        my: number;\r\n        mx: number;\r\n        dx: number;\r\n        d: string;\r\n        pl: number;\r\n    }>;\r\n    w: number;\r\n};\r\n\r\nexport type ObjectKeys<T> = T extends object\r\n    ? (keyof T)[]\r\n    : T extends number\r\n    ? []\r\n    : T extends Array<any> | string\r\n    ? string[]\r\n    : never;\r\n\r\nexport const BLOCK_COMPOSITION = [\"block\",\"line\",\"letter\",\"letterPart\"] as const;\r\n\r\nexport type BlockComposition = typeof BLOCK_COMPOSITION;\r\n\r\nexport type BlockName = BlockComposition[number];\r\n\r\nexport type Blocks = Block | Line | Letter | LetterPart;\r\n\r\nexport type BlockMapped = {\r\n    \"block\" : Block,\r\n    \"line\": Line,\r\n    \"letter\": Letter,\r\n    \"letterPart\": LetterPart\r\n}","import { BlockMapped, BlockName, Blocks, BLOCK_COMPOSITION } from '../types';\r\n\r\ninterface RenderItemProps {\r\n    ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks;\r\n}\r\n\r\nexport default class RenderBase {\r\n    ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks | null;\r\n    name: BlockName;\r\n\r\n    constructor(props: RenderItemProps) {\r\n        this.ctx = props.ctx;\r\n        this.parent = props.parent ?? null;\r\n        this.name = 'block';\r\n    }\r\n\r\n    getParent<T extends BlockName>(parentName: T, current: Blocks): BlockMapped[T] | false {\r\n        const parentIndex = BLOCK_COMPOSITION.indexOf(parentName);\r\n        const currentItemIndex = BLOCK_COMPOSITION.indexOf(this.name);\r\n        if (parentIndex < currentItemIndex) {\r\n            if (current.name === parentName) {\r\n                return current as BlockMapped[T];\r\n            } else {\r\n                if (current.parent)\r\n                    return this.getParent(parentName, current?.parent);\r\n                else return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","import { BlockName } from '../types';\r\nimport Block from './block';\r\nimport Letter from './letter';\r\nimport RenderBase from './renderbase';\r\n\r\nexport interface LetterPartProps {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Letter;\r\n}\r\n\r\nexport default class LetterPart extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    name: BlockName;\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterPartProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.path = props.path;\r\n        this.pathLength = props.pathLength;\r\n        this.dashOffset = props.dashOffset;\r\n        this.width = props.width;\r\n\r\n        this.name = 'letterPart';\r\n\r\n        this.rootBlock = this.getParent('block', this) as Block;\r\n    }\r\n\r\n    /**\r\n     * Paints the path\r\n     */\r\n    paint() {\r\n        // console.log(this.x,this.y);\r\n        this.ctx.save();\r\n        this.ctx.stroke(\r\n            new Path2D(this.processPath(this.path, this.x, this.y))\r\n        );\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Increments the dashOffset and then paints the path.\r\n     */\r\n    draw(delta: number) {\r\n        const pathDuration =\r\n            ((this.pathLength / this.rootBlock.totalPathLength) *\r\n                this.rootBlock.options.duration) /\r\n            1000;\r\n\r\n        const speed = this.pathLength / pathDuration;\r\n\r\n        this.ctx.save();\r\n        this.ctx.lineDashOffset = 1;\r\n        this.ctx.setLineDash([this.dashOffset, this.pathLength + 1]);\r\n        this.dashOffset += speed * delta;\r\n        this.paint();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n}\r\n","import { BlockName } from \"../types\";\r\nimport Block from \"./block\";\r\nimport VaraChar from \"./char\";\r\nimport LetterPart, { LetterPartProps } from \"./letterpart\";\r\nimport Line from \"./line\";\r\nimport RenderBase from \"./renderbase\";\r\n\r\nexport interface LetterProps {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Line;\r\n    character: VaraChar;\r\n}\r\n\r\nexport default class Letter extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    character: VaraChar;\r\n\r\n    parts: LetterPart[];\r\n\r\n    drawnParts: LetterPart[];\r\n    name: BlockName;\r\n\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.width = props.width;\r\n        this.parts = [];\r\n        this.drawnParts = [];\r\n        this.name = \"letter\"\r\n\r\n        this.character = props.character;\r\n\r\n        this.rootBlock = this.getParent(\"block\", this) as Block;\r\n    }\r\n\r\n    setPosition(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Add a new part to the queue\r\n     * @param part The part to be added\r\n     */\r\n    addPart(part: Omit<LetterPartProps,\"ctx\"|\"parent\">) {\r\n        this.parts.push(new LetterPart({\r\n            ...part,\r\n            ctx: this.ctx,\r\n            parent: this,\r\n        }));\r\n    \r\n        \r\n        // Update the total path length stored in the main block.\r\n        if(this.rootBlock){\r\n            this.rootBlock.modifyPathLength(part.pathLength, \"increment\");\r\n        }\r\n    }\r\n\r\n    isDone() {\r\n        return this.parts.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a part has been drawn completely.\r\n     * \r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.parts.shift();\r\n        if (removedItem) this.drawnParts.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current letter\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, previousRAFTime: number) {\r\n\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale, this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        const delta = (rafTime - previousRAFTime) / 1000;\r\n\r\n        if (this.parts.length > 0) {\r\n            const part = this.parts[0];\r\n            if (part.dashOffset > part.pathLength) {\r\n                this.dequeue();\r\n            } else {\r\n                part.draw(delta);\r\n            }\r\n        }\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        })\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n\r\n    /**\r\n     * Paints the paths whose animations are complete\r\n     */\r\n    paint() {\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale,this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        })\r\n\r\n        this.ctx.restore();\r\n    }\r\n}","import { BlockName } from \"../types\";\r\nimport Block from \"./block\";\r\nimport Letter, { LetterProps } from \"./letter\";\r\nimport RenderBase from \"./renderbase\";\r\n\r\nexport interface LineProps {\r\n    x: number;\r\n    y: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Block;\r\n}\r\n\r\nexport default class Line extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    letters: Letter[];\r\n    _letters: Letter[];\r\n    drawnLetters: Letter[];\r\n    name: BlockName;\r\n\r\n    constructor(props: LineProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.ctx = props.ctx;\r\n        this.letters = [];\r\n        this._letters = [];\r\n        this.drawnLetters = [];\r\n        this.name = \"line\";\r\n    }\r\n\r\n    addLetter(letter: Omit<LetterProps, \"ctx\"|\"parent\"> & { parent?: Line}) {\r\n        const newLetter = new Letter({\r\n            ...letter,\r\n            parent: letter.parent ?? this,\r\n            ctx: this.ctx\r\n        })\r\n\r\n        letter.character.getFontItem().paths.forEach(path => {\r\n            newLetter.addPart({\r\n                path: path.d,\r\n                x: path.mx - path.dx,\r\n                y: -path.my,\r\n                pathLength: path.pl,\r\n                dashOffset: 0,\r\n                width: path.w,\r\n            });\r\n        })\r\n        this.letters.push(newLetter);\r\n        this._letters.push(newLetter);\r\n\r\n        return newLetter;\r\n    }\r\n\r\n    setLetters(letters: Letter[]) {\r\n        this._letters = letters;\r\n        this.letters = letters.filter(letter => !letter.isDone());\r\n        this.drawnLetters = letters.filter(letter => letter.isDone());\r\n    }\r\n\r\n    generateLetter(letter: Omit<LetterProps, \"ctx\"|\"parent\">) {\r\n        const newLetter = new Letter({\r\n            ...letter,\r\n            parent: this,\r\n            ctx: this.ctx\r\n        })\r\n        return newLetter;\r\n    }\r\n\r\n    setPosition(x:number, y:number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    isDone(){\r\n        return this.letters.length === 0;\r\n    }\r\n\r\n    getAllLetters(){\r\n        return this._letters;\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a letter has been drawn completely.\r\n     * The removed item is moved to the drawnLetters array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.letters.shift();\r\n        if (removedItem) this.drawnLetters.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current line\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, prevRAFTime: number){\r\n        this.ctx.save();\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        if(this.letters.length > 0) {\r\n            const currentLetter = this.letters[0];\r\n            currentLetter.render(rafTime, prevRAFTime);\r\n\r\n            if(currentLetter.parts.length === 0) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n\r\n        this.drawnLetters.forEach(letter => {\r\n            letter.paint();\r\n        })\r\n\r\n        this.ctx.restore();\r\n    }\r\n}","import { BlockName, VaraText } from '../types';\r\nimport { SCALEBASE } from './constants';\r\nimport Line, { LineProps } from './line';\r\nimport RenderBase from './renderbase';\r\n\r\ninterface BlockProps {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    options: Required<VaraText>;\r\n}\r\n\r\nexport default class Block extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    scale: number;\r\n\r\n    ctx: CanvasRenderingContext2D;\r\n    previousRAFTime: number;\r\n    lines: Line[];\r\n    _lines: Line[];\r\n    drawnLines: Line[];\r\n    totalPathLength: number;\r\n    options: Required<VaraText>;\r\n\r\n    name: BlockName;\r\n\r\n    constructor(props: BlockProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.width = props.width;\r\n\r\n        this.lines = [];\r\n        this._lines = [];\r\n        this.drawnLines = [];\r\n        this.ctx = props.ctx;\r\n        this.previousRAFTime = 0;\r\n        this.totalPathLength = 0;\r\n        this.options = props.options;\r\n\r\n        this.name = 'block';\r\n\r\n        this.scale = props.options.fontSize / SCALEBASE;\r\n    }\r\n\r\n    /**\r\n     * Creates and adds a new line of text\r\n     * @param line The properties of the line to be added\r\n     */\r\n    addLine(line: Omit<LineProps, 'ctx' | 'parent'>) {\r\n        const newLine = new Line({\r\n            ...line,\r\n            ctx: this.ctx,\r\n            parent: this,\r\n        });\r\n\r\n        this.lines.push(newLine);\r\n        this._lines.push(newLine);\r\n\r\n        return newLine;\r\n    }\r\n\r\n    getAllLetters() {\r\n        const letters = this._lines.map(item => item._letters);\r\n        return letters.flat();\r\n    } \r\n\r\n\r\n    getLetterById(id: number) {\r\n        return this.getAllLetters().find(item => item.character.id === id) ?? false;\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a text line has been drawn completely.\r\n     * \r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.lines.shift();\r\n        if (removedItem) this.lines.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the total path length\r\n     * @param pathLength Path length that is to be incremented or decrement\r\n     * @param action Whether to increment or decrement\r\n     */\r\n    modifyPathLength(\r\n        pathLength: number,\r\n        action: 'increment' | 'decrement' = 'increment'\r\n    ) {\r\n        if (action === 'increment') {\r\n            this.totalPathLength += pathLength;\r\n        } else {\r\n            this.totalPathLength -= pathLength;\r\n        }\r\n        return this.totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Render the block\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number) {\r\n        if (this.previousRAFTime === 0) {\r\n            this.previousRAFTime = rafTime;\r\n        }\r\n\r\n        this.ctx.save();\r\n        this.ctx.strokeStyle = this.options.color;\r\n        this.ctx.lineWidth = this.options.strokeWidth;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n\r\n\r\n        this.drawnLines.forEach(line => {\r\n            line.render(rafTime, this.previousRAFTime);\r\n        });\r\n\r\n        if(this.lines.length > 0) {\r\n            const line = this.lines[0];\r\n            line.render(rafTime, this.previousRAFTime);\r\n            if(line.letters.length === 0) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n        this.ctx.restore();\r\n\r\n        this.previousRAFTime = rafTime;\r\n    }\r\n}\r\n","import { VaraFontItem } from \"../types\";\r\n\r\ninterface VaraCharProps {\r\n    char: string;\r\n    fontItem: VaraFontItem;\r\n    isSpace?: boolean;\r\n}\r\n\r\nlet ___varaCharId___ = 0;\r\n\r\nexport default class VaraChar {\r\n    char: string;\r\n    id: number;\r\n    fontItem: VaraFontItem;\r\n    isSpace: boolean;\r\n\r\n    constructor(props:VaraCharProps) {\r\n        this.char = props.char;\r\n        this.fontItem = props.fontItem;\r\n        this.isSpace = props.isSpace ?? false;\r\n\r\n        this.id = ___varaCharId___;\r\n        ___varaCharId___++;\r\n    }\r\n\r\n    getFontItem() {\r\n        return this.fontItem;\r\n    }\r\n\r\n    getId() {\r\n        return this.id;\r\n    }\r\n}","import { VaraFontItem, VaraText, VaraTextOptions } from '../types';\r\nimport Block from './block';\r\nimport VaraChar from './char';\r\nimport { SCALEBASE, WHITESPACE } from './constants';\r\nimport Letter from './letter';\r\nimport Line from './line';\r\n\r\ninterface RenderItemProps {\r\n    textItem: VaraText;\r\n    options: Required<VaraTextOptions>;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    ctx: CanvasRenderingContext2D;\r\n}\r\n\r\nexport default class RenderItem {\r\n    textItem: Required<VaraText>;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    ctx: CanvasRenderingContext2D;\r\n    block: Block | null;\r\n    height: number;\r\n    text: VaraChar[][];\r\n\r\n    constructor(props: RenderItemProps) {\r\n        this.textItem = {\r\n            ...props.options,\r\n            ...props.textItem,\r\n        };\r\n        this.height = 0;\r\n        this.fontCharacters = props.fontCharacters;\r\n        this.ctx = props.ctx;\r\n        this.block = null;\r\n\r\n        if (typeof this.textItem.text === 'string') {\r\n            this.text = [\r\n                this.textItem.text.split('').map(\r\n                    letter =>\r\n                        new VaraChar({\r\n                            char: letter,\r\n                            fontItem:\r\n                                this.fontCharacters[letter.charCodeAt(0)] ||\r\n                                this.fontCharacters['63'],\r\n                            isSpace: letter === ' ',\r\n                        })\r\n                ),\r\n            ];\r\n        } else if (Array.isArray(this.textItem.text)) {\r\n            this.text = this.textItem.text.map(line =>\r\n                line.split('').map(\r\n                    letter =>\r\n                        new VaraChar({\r\n                            char: letter,\r\n                            fontItem:\r\n                                this.fontCharacters[letter.charCodeAt(0)] ||\r\n                                this.fontCharacters['63'],\r\n                            isSpace: letter === ' ',\r\n                        })\r\n                )\r\n            );\r\n        } else {\r\n            // TODO: Show warning / error\r\n            this.text = [];\r\n        }\r\n    }\r\n\r\n    addLetter({\r\n        letter,\r\n        position,\r\n    }: {\r\n        letter: string;\r\n        position: number | number[];\r\n    }) {\r\n        // let textBlock: string[] = [];\r\n        // if (Array.isArray(position) && Array.isArray(this.textItem.text)) {\r\n        //     textBlock[position[0]] = `${this.textItem.text[position[0]].slice(\r\n        //         0,\r\n        //         position[1]\r\n        //     )}${letter}${this.textItem.text[position[0]].slice(position[1])}`;\r\n        // } else {\r\n        //     if (typeof position === 'number') {\r\n        //         textBlock = [\r\n        //             `${this.textItem.text+\" \".slice(\r\n        //                 0,\r\n        //                 position\r\n        //             )}${letter}${this.textItem.text+\" \".slice(position)}`,\r\n        //         ];\r\n        //     }\r\n        // }\r\n\r\n        if (typeof position === 'number') {\r\n            let textCharCount = 0;\r\n            this.text.forEach((textLine, index) => {\r\n                console.log(textLine, position);\r\n                if (position <= textCharCount + textLine.length) {\r\n                    console.log(\"Here\");\r\n                    console.log(\"Before\", JSON.parse(JSON.stringify(this.text[index])));\r\n                    this.text[index] = [\r\n                        ...textLine.slice(0, position - textCharCount),\r\n                        new VaraChar({\r\n                            char: letter,\r\n                            fontItem:\r\n                                this.fontCharacters[letter.charCodeAt(0)] ||\r\n                                this.fontCharacters['63'],\r\n                            isSpace: letter === ' ',\r\n                        }),\r\n                        ...textLine.slice(position - textCharCount),\r\n                    ];\r\n                    console.log(\"After\", JSON.parse(JSON.stringify(this.text[index])));\r\n                } else {\r\n                    textCharCount += textLine.length;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.regeneratePositions();\r\n    }\r\n\r\n    regeneratePositions() {\r\n        console.log(this.block);\r\n        let scale = this.textItem.fontSize / SCALEBASE;\r\n        this.height = 0;\r\n\r\n        const lines = this.generateLineData(this.text);\r\n\r\n        let top = this.textItem.lineHeight;\r\n\r\n        const block = this.block as Block;\r\n\r\n        if (lines.length > block._lines.length) {\r\n            while (lines.length > block._lines.length) {\r\n                block.addLine({\r\n                    x: 0,\r\n                    y: 0,\r\n                });\r\n            }\r\n        }\r\n\r\n        lines.forEach((line, lineIndex) => {\r\n            let left = 0;\r\n            let x = 0,\r\n                y = top;\r\n            if (this.textItem.textAlign === 'center') {\r\n                x = (this.textItem.width - line.width) / 2;\r\n            }\r\n\r\n            let lineClass = block.lines[lineIndex];\r\n            lineClass.setPosition(x, y);\r\n            const lettersToSet: Letter[] = [];\r\n\r\n            line.text.forEach(letter => {\r\n                if (letter.isSpace) {\r\n                    left += WHITESPACE;\r\n                } else {\r\n                    let foundLetter = block.getLetterById(letter.id);\r\n                    if (foundLetter) {\r\n                        foundLetter.parent = lineClass;\r\n                        foundLetter.setPosition(left, top);\r\n                        lettersToSet.push(foundLetter);\r\n                        left += foundLetter.character.getFontItem().w;\r\n                    } else {\r\n                        lettersToSet.push(\r\n                            lineClass.addLetter({\r\n                                character: letter,\r\n                                width: letter.getFontItem().w,\r\n                                x: left,\r\n                                y: top,\r\n                            })\r\n                        );\r\n                        left += letter.getFontItem().w;\r\n                    }\r\n                }\r\n            });\r\n            top += this.textItem.lineHeight;\r\n            this.height += this.textItem.lineHeight * scale;\r\n\r\n            lineClass.setLetters(lettersToSet);\r\n\r\n            console.log(lettersToSet);\r\n        });\r\n    }\r\n\r\n    generatePositions() {\r\n        let scale = this.textItem.fontSize / SCALEBASE;\r\n        this.height = 0;\r\n\r\n        const lines = this.generateLineData(this.text);\r\n\r\n        let top = this.textItem.lineHeight;\r\n\r\n        const block = new Block({\r\n            width: this.textItem.width,\r\n            x: this.textItem.x,\r\n            y: this.textItem.y,\r\n            ctx: this.ctx,\r\n            options: this.textItem,\r\n        });\r\n\r\n        lines.forEach(line => {\r\n            let left = 0;\r\n            let x = 0,\r\n                y = top;\r\n            if (this.textItem.textAlign === 'center') {\r\n                x = (this.textItem.width - line.width) / 2;\r\n            }\r\n\r\n            const lineClass = block.addLine({\r\n                x,\r\n                y,\r\n            });\r\n\r\n            line.text.forEach(letter => {\r\n                if (letter.isSpace) {\r\n                    left += WHITESPACE;\r\n                } else {\r\n                    const currentLetter = letter.getFontItem();\r\n\r\n                    lineClass.addLetter({\r\n                        x: left,\r\n                        y: top,\r\n                        width: currentLetter.w,\r\n                        character: letter,\r\n                    });\r\n\r\n                    left += currentLetter.w;\r\n                }\r\n            });\r\n            top += this.textItem.lineHeight;\r\n            this.height += this.textItem.lineHeight * scale;\r\n        });\r\n\r\n        this.block = block;\r\n    }\r\n\r\n    generateLineData(lines: VaraChar[][]) {\r\n        let scale = this.textItem.fontSize / SCALEBASE;\r\n\r\n        const returnData: {\r\n            text: VaraChar[];\r\n            width: number;\r\n        }[] = [\r\n            {\r\n                text: [],\r\n                width: 0,\r\n            },\r\n        ];\r\n\r\n        const wordSplittedLines: VaraChar[][][] = [];\r\n\r\n        lines.forEach(line => {\r\n            let l: VaraChar[][] = [[]];\r\n            line.forEach(letter => {\r\n                if (letter.isSpace) {\r\n                    l.push([]);\r\n                } else {\r\n                    l[l.length - 1].push(letter);\r\n                }\r\n            });\r\n            wordSplittedLines.push(l);\r\n        });\r\n\r\n        wordSplittedLines.forEach(line => {\r\n            let spaceWidth = 0;\r\n            line.forEach(word => {\r\n                let wordWidth = 0;\r\n\r\n                word.forEach(letter => {\r\n                    const currentLetter = letter.getFontItem();\r\n\r\n                    let pathPositionCorrection = currentLetter.paths.reduce(\r\n                        (a, c) => a + c.mx - c.dx,\r\n                        0\r\n                    );\r\n                    wordWidth +=\r\n                        (currentLetter.w + pathPositionCorrection) * scale;\r\n                });\r\n\r\n                if (\r\n                    (returnData[lines.length - 1]?.width ?? 0) +\r\n                        wordWidth +\r\n                        5 * scale +\r\n                        spaceWidth +\r\n                        this.textItem.x * scale >\r\n                    this.textItem.width\r\n                ) {\r\n                    returnData.push({\r\n                        text: [\r\n                            ...word,\r\n                            new VaraChar({\r\n                                char: ' ',\r\n                                fontItem: this.fontCharacters['63'],\r\n                                isSpace: true,\r\n                            }),\r\n                        ],\r\n                        width: wordWidth,\r\n                    });\r\n                    spaceWidth = 0;\r\n                } else {\r\n                    returnData[returnData.length - 1] = {\r\n                        text: [\r\n                            ...returnData[returnData.length - 1].text,\r\n                            ...word,\r\n                            new VaraChar({\r\n                                char: ' ',\r\n                                fontItem: this.fontCharacters['63'],\r\n                                isSpace: true,\r\n                            }),\r\n                        ],\r\n                        width:\r\n                            returnData[returnData.length - 1].width + wordWidth,\r\n                    };\r\n                    spaceWidth += WHITESPACE * scale;\r\n                }\r\n            });\r\n        });\r\n\r\n        return returnData;\r\n    }\r\n\r\n    render(rafTime: number) {\r\n        if (this.block) {\r\n            this.block.render(rafTime);\r\n        }\r\n    }\r\n\r\n    rendered() {\r\n        return this.block?.lines.length === 0;\r\n    }\r\n}\r\n","import {\r\n    VaraGeneralOptions,\r\n    VaraText,\r\n    RenderData,\r\n    VaraFontItem,\r\n    ObjectKeys,\r\n    VaraTextOptions,\r\n} from './types';\r\nimport RenderItem from './utils/renderitem';\r\n\r\nexport default class Vara {\r\n    elementName: string;\r\n    element: HTMLElement;\r\n    fontSource: string;\r\n    options: VaraGeneralOptions;\r\n    textItems: VaraText[];\r\n    renderData: {\r\n        queued: RenderData;\r\n        nonQueued: RenderData;\r\n    };\r\n    rendered: boolean;\r\n    defaultOptions: Required<VaraGeneralOptions>;\r\n    defaultCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    canvasWidth: number;\r\n    contextHeight: number;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    fontProperties!: {\r\n        s: number;\r\n        // TODO: add other properties\r\n        slc: 'round';\r\n        bsw: number;\r\n        lh: number;\r\n        space: number;\r\n        tf: number;\r\n    };\r\n    onDrawF?: (fn?: Required<RenderData>) => void;\r\n    WHITESPACE: number;\r\n    SCALEBASE: number;\r\n\r\n    constructor(\r\n        elem: string,\r\n        fontSource: string,\r\n        text: VaraText[],\r\n        options: VaraGeneralOptions\r\n    ) {\r\n        this.elementName = elem;\r\n        this.element = document.querySelector(elem) as HTMLElement;\r\n        this.fontSource = fontSource;\r\n        this.options = options;\r\n        this.textItems = text;\r\n        this.renderData = {\r\n            nonQueued: [],\r\n            queued: [],\r\n        };\r\n        this.rendered = false;\r\n        this.fontCharacters = {};\r\n        this.canvasWidth = 0;\r\n\r\n        this.defaultOptions = {\r\n            fontSize: 21,\r\n            strokeWidth: 0.5,\r\n            color: '#000',\r\n            duration: 1000,\r\n            textAlign: 'left',\r\n            autoAnimation: true,\r\n            queued: true,\r\n            delay: 0,\r\n            breakWord: false,\r\n            letterSpacing: {\r\n                global: 0,\r\n            },\r\n            width: this.element.getBoundingClientRect().width,\r\n            lineHeight: 30,\r\n        };\r\n\r\n        this.defaultCharacters = {\r\n            '63': {\r\n                paths: [\r\n                    {\r\n                        w: 8.6437,\r\n                        h: 14.23173,\r\n                        my: 22.6665,\r\n                        mx: 0,\r\n                        dx: 0,\r\n                        d:\r\n                            'm 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85',\r\n                        pl: 1,\r\n                    },\r\n                    {\r\n                        w: 1.1037,\r\n                        h: 1.5498,\r\n                        my: 8.8815,\r\n                        dx: 0,\r\n                        mx: 1,\r\n                        d:\r\n                            'm 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z',\r\n                        pl: 1,\r\n                    },\r\n                ],\r\n                w: 8.6437,\r\n            },\r\n        };\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = this.element.getBoundingClientRect().width;\r\n        this.canvas.height = 800;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        this.element.appendChild(this.canvas);\r\n        this.WHITESPACE = 10;\r\n        this.SCALEBASE = 16;\r\n\r\n        this.contextHeight = 0;\r\n\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.normalizeOptions();\r\n\r\n        const xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', this.fontSource, true);\r\n        xmlhttp.onreadystatechange = () => {\r\n            if (xmlhttp.readyState == 4) {\r\n                if (xmlhttp.status == 200) {\r\n                    const contents = JSON.parse(xmlhttp.responseText);\r\n                    this.fontCharacters = contents.c;\r\n                    this.fontProperties = contents.p;\r\n                    this.preRender();\r\n                    this.render();\r\n                }\r\n            }\r\n        };\r\n        xmlhttp.send(null);\r\n    }\r\n\r\n    onDraw(fn: (a?: Required<RenderData>) => void) {\r\n        this.onDrawF = fn;\r\n    }\r\n\r\n    /**\r\n     * Sets default option value for all existing option properties.\r\n     * If an option value is not provided, then it will first check if it is given in the global options, if not it will use the default option.\r\n     */\r\n    private normalizeOptions() {\r\n        this.options = this.options || {};\r\n\r\n        this.options = {\r\n            ...this.defaultOptions,\r\n            ...this.options,\r\n        };\r\n\r\n        Object.keys(this.defaultCharacters).forEach(character => {\r\n            if (this.fontCharacters[character] === undefined) {\r\n                this.fontCharacters[character] = this.defaultCharacters[\r\n                    character\r\n                ];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs some actions before rendering starts. These include finding the pathLength of each path and generating the render data.\r\n     */\r\n    private preRender() {\r\n        let svg = this.createSVGNode('svg', {\r\n            width: '100',\r\n            height: '100',\r\n        });\r\n        svg.style.position = 'absolute';\r\n        svg.style.zIndex = '-100';\r\n        svg.style.opacity = '0';\r\n        svg.style.top = '0';\r\n\r\n        document.body.appendChild(svg);\r\n        let svgPathData = this.createSVGNode('path', {\r\n            d: '',\r\n        }) as SVGPathElement;\r\n        svg.appendChild(svgPathData);\r\n\r\n        this.objectKeys(this.fontCharacters).forEach(char => {\r\n            this.fontCharacters[char].paths.forEach((path, i) => {\r\n                svgPathData.setAttributeNS(null, 'd', path.d);\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].dx = svgPathData.getBoundingClientRect().x;\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].pl = svgPathData.getTotalLength();\r\n            });\r\n        });\r\n\r\n        this.textItems.forEach(item => {\r\n            const renderItem = new RenderItem({\r\n                fontCharacters: this.fontCharacters,\r\n                options: this.options as Required<VaraTextOptions>,\r\n                textItem: item,\r\n                ctx: this.ctx,\r\n            });\r\n\r\n            renderItem.generatePositions();\r\n\r\n            if (item.queued) {\r\n                this.renderData.queued.push(renderItem);\r\n            } else {\r\n                this.renderData.nonQueued.push(renderItem);\r\n            }\r\n        });\r\n    }\r\n\r\n    private render(rafTime = 0) {\r\n        let canvasHeight = this.calculateCanvasHeight();\r\n        if (canvasHeight !== this.canvas.height) {\r\n            this.canvas.height = canvasHeight;\r\n        }\r\n        this.ctx.clearRect(0, 0, this.canvas.width, canvasHeight);\r\n\r\n        this.renderData.nonQueued.forEach(item => {\r\n            item.render(rafTime);\r\n        });\r\n\r\n        if (this.renderData.queued.length > 0) {\r\n            const queueHead = this.renderData.queued[0];\r\n            queueHead.render(rafTime);\r\n            if (queueHead.rendered()) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n\r\n        window.requestAnimationFrame(time => this.render(time));\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a block has been drawn completely.\r\n     * The removed item is moved to the drawnLetters array\r\n     */\r\n    private dequeue() {\r\n        const removedItem = this.renderData.queued.shift();\r\n        if (removedItem) this.renderData.nonQueued.push(removedItem);\r\n    }\r\n\r\n    // TODO: Make proper calculation function.\r\n    calculateCanvasHeight() {\r\n        let height = 0;\r\n        [...this.renderData.nonQueued, ...this.renderData.queued].forEach(\r\n            item => {\r\n                if (item.height && item.textItem.y) {\r\n                    height += item.height + item.textItem.y;\r\n                }\r\n            }\r\n        );\r\n        return height + 50;\r\n    }\r\n\r\n    addLetter({\r\n        letter,\r\n        id,\r\n        position,\r\n    }: {\r\n        letter: string;\r\n        id: string;\r\n        position: number;\r\n    }) {\r\n        const block = [\r\n            ...this.renderData.nonQueued,\r\n            ...this.renderData.queued,\r\n        ].find(item => item.textItem.id === id);\r\n\r\n        console.log(letter, position);\r\n        block?.addLetter({ letter, position });\r\n        // if(block) {\r\n        //     block.\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * Creates and returns an SVG element\r\n     * @param n The name of the SVG node to be created\r\n     * @param v The attributes of the node\r\n     */\r\n\r\n    createSVGNode(n: string, v: { [x: string]: string }) {\r\n        const e = document.createElementNS('http://www.w3.org/2000/svg', n);\r\n        for (var p in v)\r\n            e.setAttributeNS(\r\n                null,\r\n                p.replace(/[A-Z]/g, function(m) {\r\n                    return '-' + m.toLowerCase();\r\n                }),\r\n                v[p]\r\n            );\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Modifies the move to command of a given path and returns it.\r\n     * @param path The path \"d\" property\r\n     * @param x The x co-ordinate\r\n     * @param y The y co-ordinate\r\n     */\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + 1 + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n\r\n    objectKeys<T>(x: T) {\r\n        let keys = Object.keys(x) as ObjectKeys<T>;\r\n        return keys;\r\n    }\r\n\r\n    boundRect(x: number, y: number, w: number, h = 10) {\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = 'rgba(209, 56, 61,0.4)';\r\n        this.ctx.fillRect(x, y, w, h);\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\nif (window) {\r\n    (<any>window).Vara = Vara;\r\n}\r\n"],"names":["SCALEBASE","WHITESPACE","BLOCK_COMPOSITION","RenderBase","props","ctx","parent","name","getParent","parentName","current","parentIndex","indexOf","currentItemIndex","LetterPart","x","y","path","pathLength","dashOffset","width","rootBlock","paint","save","stroke","Path2D","processPath","restore","draw","delta","pathDuration","totalPathLength","options","duration","speed","lineDashOffset","setLineDash","svgPath","split","join","Letter","parts","drawnParts","character","setPosition","addPart","part","push","modifyPathLength","isDone","length","dequeue","removedItem","shift","render","rafTime","previousRAFTime","scale","translate","forEach","drawnPart","Line","letters","_letters","drawnLetters","addLetter","letter","newLetter","getFontItem","paths","d","mx","dx","my","pl","w","setLetters","filter","generateLetter","getAllLetters","prevRAFTime","currentLetter","Block","lines","_lines","drawnLines","fontSize","addLine","line","newLine","map","item","flat","getLetterById","id","find","action","strokeStyle","color","lineWidth","strokeWidth","lineCap","lineJoin","___varaCharId___","VaraChar","fontItem","isSpace","getId","RenderItem","textItem","height","fontCharacters","block","text","charCodeAt","Array","isArray","position","textCharCount","textLine","index","console","log","JSON","parse","stringify","slice","regeneratePositions","generateLineData","top","lineHeight","lineIndex","left","textAlign","lineClass","lettersToSet","foundLetter","generatePositions","returnData","wordSplittedLines","l","spaceWidth","word","wordWidth","pathPositionCorrection","reduce","a","c","rendered","Vara","elem","fontSource","elementName","element","document","querySelector","textItems","renderData","nonQueued","queued","canvasWidth","defaultOptions","autoAnimation","delay","breakWord","letterSpacing","global","getBoundingClientRect","defaultCharacters","h","canvas","createElement","getContext","appendChild","contextHeight","init","normalizeOptions","xmlhttp","XMLHttpRequest","open","onreadystatechange","readyState","status","contents","responseText","fontProperties","p","preRender","send","onDraw","fn","onDrawF","Object","keys","undefined","svg","createSVGNode","style","zIndex","opacity","body","svgPathData","objectKeys","char","i","setAttributeNS","getTotalLength","renderItem","canvasHeight","calculateCanvasHeight","clearRect","queueHead","window","requestAnimationFrame","time","n","v","e","createElementNS","replace","m","toLowerCase","boundRect","fillStyle","fillRect","fill"],"mappings":"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"}
{"version":3,"file":"vara.umd.production.min.js","sources":["../src/index.ts"],"sourcesContent":["//# sourceMappingURL=./vara.js.map\r\ntype VaraGeneralOptions = {\r\n    fontSize?: number;\r\n    strokeWidth?: number;\r\n    color?: string;\r\n    duration?: number;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    autoAnimation?: boolean;\r\n    queued?: boolean;\r\n    delay?: number;\r\n    letterSpacing?:\r\n        | {\r\n              [x: string]: number;\r\n          }\r\n        | number;\r\n    breakWord?: boolean;\r\n    width?: number;\r\n};\r\n\r\ntype VaraTextOptions = VaraGeneralOptions & {\r\n    id?: string | number | false;\r\n    x?: number;\r\n    y?: number;\r\n    fromCurrentPosition?: {\r\n        x?: boolean;\r\n        y?: boolean;\r\n    };\r\n};\r\n\r\ntype VaraText = VaraTextOptions & {\r\n    text: string;\r\n};\r\n\r\ntype RenderData = VaraText & {\r\n    render?: {\r\n        path: string;\r\n        x: number;\r\n        y: number;\r\n        pathLength: number;\r\n        dashOffset: number;\r\n    }[];\r\n    currentlyDrawing?: number;\r\n    startTime?: number | false;\r\n};\r\n\r\ntype VaraFontItem = {\r\n    paths: Array<{\r\n        w: number;\r\n        h: number;\r\n        my: number;\r\n        mx: number;\r\n        dx: number;\r\n        d: string;\r\n        pl: number;\r\n    }>;\r\n    w: number;\r\n};\r\n\r\ntype ObjectKeys<T> = T extends object\r\n    ? (keyof T)[]\r\n    : T extends number\r\n    ? []\r\n    : T extends Array<any> | string\r\n    ? string[]\r\n    : never;\r\n\r\nclass Vara {\r\n    elementName: string;\r\n    element: HTMLElement;\r\n    fontSource: string;\r\n    options: VaraGeneralOptions;\r\n    textItems: VaraText[];\r\n    renderData: RenderData[];\r\n    rendered: boolean;\r\n    defaultOptions: Required<VaraGeneralOptions>;\r\n    defaultCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    canvasWidth: number;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    fontProperties!: {\r\n        s: number;\r\n        // TODO: add other properties\r\n        slc: 'round';\r\n        bsw: number;\r\n        lh: number;\r\n        space: number;\r\n        tf: number;\r\n    };\r\n    WHITESPACE: number;\r\n    SCALEBASE: number;\r\n\r\n    constructor(\r\n        elem: string,\r\n        fontSource: string,\r\n        text: VaraText[],\r\n        options: VaraGeneralOptions\r\n    ) {\r\n        this.elementName = elem;\r\n        this.element = document.querySelector(elem) as HTMLElement;\r\n        this.fontSource = fontSource;\r\n        this.options = options;\r\n        this.textItems = text;\r\n        this.renderData = text;\r\n        this.rendered = false;\r\n        this.fontCharacters = {};\r\n        this.canvasWidth = 0;\r\n\r\n        this.defaultOptions = {\r\n            fontSize: 21,\r\n            strokeWidth: 0.5,\r\n            color: '#000',\r\n            duration: 1000,\r\n            textAlign: 'left',\r\n            autoAnimation: true,\r\n            queued: true,\r\n            delay: 0,\r\n            breakWord: false,\r\n            letterSpacing: {\r\n                global: 0,\r\n            },\r\n            width: this.element.getBoundingClientRect().width,\r\n        };\r\n\r\n        this.defaultCharacters = {\r\n            '63': {\r\n                paths: [\r\n                    {\r\n                        w: 8.643798828125,\r\n                        h: 14.231731414794922,\r\n                        my: 22.666500004827977,\r\n                        mx: 0,\r\n                        dx: 0,\r\n                        d:\r\n                            'm 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85',\r\n                        pl: 1,\r\n                    },\r\n                    {\r\n                        w: 1.103759765625,\r\n                        h: 1.549820899963379,\r\n                        my: 8.881500004827977,\r\n                        dx: 0,\r\n                        mx: 1,\r\n                        d:\r\n                            'm 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z',\r\n                        pl: 1,\r\n                    },\r\n                ],\r\n                w: 8.643798828125,\r\n            },\r\n        };\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = 800;\r\n        this.canvas.height = 800;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        this.element.appendChild(this.canvas);\r\n        this.WHITESPACE = 10;\r\n        this.SCALEBASE = 16;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.normalizeOptions();\r\n\r\n        const xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', this.fontSource, true);\r\n        xmlhttp.onreadystatechange = () => {\r\n            if (xmlhttp.readyState == 4) {\r\n                if (xmlhttp.status == 200) {\r\n                    const contents = JSON.parse(xmlhttp.responseText);\r\n                    this.fontCharacters = contents.c;\r\n                    this.fontProperties = contents.p;\r\n                    this.preRender();\r\n                    this.render();\r\n                    //window.requestAnimationFrame()\r\n                }\r\n            }\r\n        };\r\n        xmlhttp.send(null);\r\n    }\r\n\r\n    preRender() {\r\n        let svg = this.createSVGNode('svg', {\r\n            width: '100',\r\n            height: '100',\r\n        });\r\n        svg.style.position = 'absolute';\r\n        svg.style.zIndex = '-100';\r\n        svg.style.opacity = '0';\r\n        svg.style.top = '0';\r\n\r\n        document.body.appendChild(svg);\r\n        let svgPathData = this.createSVGNode('path', {\r\n            d: '',\r\n        }) as SVGPathElement;\r\n        svg.appendChild(svgPathData);\r\n        this.objectKeys(this.fontCharacters).forEach(char => {\r\n            this.fontCharacters[char].paths.forEach((path, i) => {\r\n                svgPathData.setAttributeNS(null, 'd', path.d);\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].dx = svgPathData.getBoundingClientRect().x;\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].pl = svgPathData.getTotalLength();\r\n            });\r\n        });\r\n\r\n        this.renderData.forEach(item => {\r\n            item.currentlyDrawing = 0;\r\n            item.startTime = false;\r\n        })\r\n\r\n        this.generateRenderData(this.renderData[1]);\r\n    }\r\n\r\n    render(rafTime=0) {\r\n        this.ctx.clearRect(0, 0, 800, 800);\r\n        this.draw(this.renderData[1], rafTime);\r\n        window.requestAnimationFrame((time) => this.render(time));\r\n    }\r\n\r\n    draw(_textItem: RenderData, rafTime: number) {\r\n        const textItem = <Required<RenderData>>_textItem;\r\n        this.ctx.strokeStyle = textItem.color;\r\n        this.ctx.lineWidth = textItem.strokeWidth;\r\n        this.ctx.fillStyle = 'transparent';\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n\r\n        let scale = textItem.fontSize / this.SCALEBASE;\r\n\r\n        const totalPathLength = textItem.render.reduce((a,c) => a+c.pathLength, 0);\r\n\r\n        if(!textItem.startTime) {\r\n            textItem.startTime = rafTime;\r\n        }\r\n\r\n        textItem.render.forEach((item, itemIndex) => {\r\n            \r\n            const pathDuration = ((item.pathLength / totalPathLength) * textItem.duration)/1000;\r\n            const delta = (rafTime - (textItem.startTime as number)) / 1000;\r\n\r\n            const speed = item.pathLength / pathDuration;\r\n\r\n            this.ctx.save();\r\n            this.ctx.scale(scale, scale);\r\n\r\n            this.ctx.setLineDash([item.dashOffset, item.pathLength]);\r\n            if(textItem.currentlyDrawing === itemIndex) {\r\n                console.log(textItem.currentlyDrawing, speed, delta);\r\n                if(item.dashOffset >= item.pathLength) {\r\n                    textItem.currentlyDrawing+= 1;\r\n                }\r\n                item.dashOffset+= speed * delta;\r\n            }\r\n            \r\n            this.ctx.stroke(\r\n                new Path2D(this.processPath(item.path, item.x, item.y))\r\n            );\r\n            this.ctx.restore();\r\n        });\r\n\r\n        textItem.startTime = rafTime;\r\n        \r\n    }\r\n\r\n    /**\r\n     * Sets default option value for all existing option properties.\r\n     * If an option value is not provided, then it will first check if it is given in the global options, if not it will use the default option.\r\n     */\r\n\r\n    normalizeOptions() {\r\n        this.options = this.options || {};\r\n\r\n        this.objectKeys(this.defaultOptions).forEach(optionKey => {\r\n            if (this.options[optionKey] === undefined) {\r\n                // @ts-ignore\r\n                this.options[optionKey] = this.defaultOptions[optionKey];\r\n            }\r\n        });\r\n\r\n        this.renderData.forEach((textItem, i) => {\r\n            if (typeof textItem === 'string') {\r\n                this.renderData[i] = {\r\n                    text: textItem,\r\n                    ...this.defaultOptions,\r\n                };\r\n            } else if (typeof textItem === 'object') {\r\n                this.objectKeys(this.options).forEach(option => {\r\n                    if (textItem[option] === undefined)\r\n                        // @ts-ignore\r\n                        textItem[option] = this.options[option];\r\n                });\r\n            }\r\n        });\r\n\r\n        Object.keys(this.defaultCharacters).forEach(character => {\r\n            if (this.fontCharacters[character] === undefined) {\r\n                this.fontCharacters[character] = this.defaultCharacters[\r\n                    character\r\n                ];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculates the position of each item on the canvas and returns the data required to render it.\r\n     * @param {RenderData} _textItem A single text block that needs to be rendered.\r\n     */\r\n    generateRenderData(_textItem: RenderData) {\r\n        const textItem = <Required<RenderData>>_textItem;\r\n        let scale = textItem.fontSize / this.SCALEBASE;\r\n        // TODO: Create non breaking text\r\n        if (!textItem.breakWord) {\r\n            const textBlock =\r\n                typeof textItem.text === 'string'\r\n                    ? [textItem.text]\r\n                    : textItem.text;\r\n\r\n            const breakedTextBlock = textBlock.map(line => {\r\n                return line.split(' ');\r\n            });\r\n\r\n            const lines: {\r\n                text: string;\r\n                width: number;\r\n            }[] = [\r\n                {\r\n                    text: '',\r\n                    width: 0,\r\n                },\r\n            ];\r\n\r\n            breakedTextBlock.forEach(line => {\r\n                let spaceWidth = 0;\r\n                line.forEach(word => {\r\n                    let wordWidth = 0;\r\n\r\n                    word.split('').forEach(letter => {\r\n                        const charCode = letter.charCodeAt(0);\r\n\r\n                        const currentLetter =\r\n                            this.fontCharacters[charCode] ||\r\n                            this.fontCharacters['63'];\r\n                        let pathPositionCorrection = currentLetter.paths.reduce(\r\n                            (a, c) => a + c.mx - c.dx,\r\n                            0\r\n                        );\r\n                        wordWidth +=\r\n                            (currentLetter.w + pathPositionCorrection) * scale;\r\n                    });\r\n\r\n                    if (\r\n                        lines[lines.length - 1].width +\r\n                            wordWidth +\r\n                            5 * scale +\r\n                            spaceWidth +\r\n                            textItem.x * scale >\r\n                        textItem.width\r\n                    ) {\r\n                        lines.push({\r\n                            text: word + ' ',\r\n                            width: wordWidth,\r\n                        });\r\n                        spaceWidth = 0;\r\n                    } else {\r\n                        lines[lines.length - 1] = {\r\n                            text: lines[lines.length - 1].text + word,\r\n                            width: lines[lines.length - 1].width + wordWidth,\r\n                        };\r\n                        spaceWidth += this.WHITESPACE * scale;\r\n                        lines[lines.length - 1].text += ' ';\r\n                    }\r\n                });\r\n            });\r\n\r\n            let posX = textItem.x / scale,\r\n                posY = textItem.y / scale,\r\n                top = textItem.fontSize * 1.2;\r\n\r\n            lines.forEach(line => {\r\n                let left = 0;\r\n                let x = posX,\r\n                    y = posY;\r\n                console.log(\r\n                    textItem.width,\r\n                    line.width,\r\n                    textItem.width - line.width\r\n                );\r\n                if (textItem.textAlign === 'center') {\r\n                    x = (textItem.width - line.width) / 2 / scale;\r\n                }\r\n                line.text.split('').forEach(letter => {\r\n                    if (letter === ' ') {\r\n                        left += this.WHITESPACE;\r\n                    } else {\r\n                        const currentLetter =\r\n                            this.fontCharacters[letter.charCodeAt(0)] ||\r\n                            this.fontCharacters['63'];\r\n\r\n                        if (!textItem.render) {\r\n                            textItem.render = [];\r\n                        }\r\n                        currentLetter.paths.forEach(path => {\r\n                            textItem.render.push({\r\n                                path: path.d,\r\n                                x: x + left + path.mx - path.dx,\r\n                                y: y + top - path.my,\r\n                                pathLength: path.pl,\r\n                                dashOffset: 0\r\n                            });\r\n                        });\r\n\r\n                        left += currentLetter.w;\r\n                    }\r\n                });\r\n                top += 30;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates and returns an SVG element\r\n     * @param n The name of the SVG node to be created\r\n     * @param v The attributes of the node\r\n     */\r\n\r\n    createSVGNode(n: string, v: { [x: string]: string }) {\r\n        const e = document.createElementNS('http://www.w3.org/2000/svg', n);\r\n        for (var p in v)\r\n            e.setAttributeNS(\r\n                null,\r\n                p.replace(/[A-Z]/g, function(m) {\r\n                    return '-' + m.toLowerCase();\r\n                }),\r\n                v[p]\r\n            );\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Modifies the move to command of a given path and returns it.\r\n     * @param path The path \"d\" property\r\n     * @param x The x co-ordinate\r\n     * @param y The y co-ordinate\r\n     */\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + 1 + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n\r\n    objectKeys<T>(x: T) {\r\n        let keys = Object.keys(x) as ObjectKeys<T>;\r\n        return keys;\r\n    }\r\n\r\n    boundRect(x: number, y: number, w: number, h = 10) {\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = 'rgba(209, 56, 61,0.4)';\r\n        this.ctx.fillRect(x, y, w, h);\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\nclass Group {\r\n    items: any[];\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor() {\r\n        this.items = [];\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n\r\nif (window) {\r\n    (<any>window).Vara = Vara;\r\n}\r\n"],"names":["Vara","elem","fontSource","text","options","elementName","element","document","querySelector","textItems","renderData","rendered","fontCharacters","canvasWidth","defaultOptions","fontSize","strokeWidth","color","duration","textAlign","autoAnimation","queued","delay","breakWord","letterSpacing","global","width","this","getBoundingClientRect","defaultCharacters","paths","w","h","my","mx","dx","d","pl","canvas","createElement","height","ctx","getContext","appendChild","WHITESPACE","SCALEBASE","init","normalizeOptions","xmlhttp","XMLHttpRequest","open","onreadystatechange","readyState","status","contents","JSON","parse","responseText","_this","c","fontProperties","p","preRender","render","send","svg","createSVGNode","style","position","zIndex","opacity","top","body","svgPathData","objectKeys","forEach","char","_this2","path","i","setAttributeNS","x","getTotalLength","item","currentlyDrawing","startTime","generateRenderData","rafTime","clearRect","draw","window","requestAnimationFrame","time","_this3","_textItem","textItem","strokeStyle","lineWidth","fillStyle","lineCap","lineJoin","scale","totalPathLength","reduce","a","pathLength","itemIndex","delta","speed","_this4","save","setLineDash","dashOffset","console","log","stroke","Path2D","processPath","y","restore","optionKey","undefined","_this5","option","Object","keys","character","breakedTextBlock","map","line","split","lines","spaceWidth","word","wordWidth","letter","charCode","charCodeAt","currentLetter","_this6","pathPositionCorrection","length","push","posX","posY","left","n","v","e","createElementNS","replace","m","toLowerCase","svgPath","join","boundRect","fillRect","fill"],"mappings":"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"}
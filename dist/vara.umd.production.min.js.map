{"version":3,"file":"vara.umd.production.min.js","sources":["../src/index.ts"],"sourcesContent":["//# sourceMappingURL=./vara.js.map\r\ntype VaraGeneralOptions = {\r\n    fontSize?: number;\r\n    strokeWidth?: number;\r\n    color?: string;\r\n    duration?: number;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    autoAnimation?: boolean;\r\n    queued?: boolean;\r\n    delay?: number;\r\n    letterSpacing?:\r\n        | {\r\n              [x: string]: number;\r\n          }\r\n        | number;\r\n    breakWord?: boolean;\r\n    width?: number;\r\n};\r\n\r\ntype VaraTextOptions = VaraGeneralOptions & {\r\n    id?: string | number | false;\r\n    x?: number;\r\n    y?: number;\r\n    fromCurrentPosition?: {\r\n        x?: boolean;\r\n        y?: boolean;\r\n    };\r\n};\r\n\r\ntype VaraText = VaraTextOptions & {\r\n    text: string;\r\n};\r\n\r\ntype RenderData = VaraText & {\r\n    render?: {\r\n        text: string;\r\n        x: number;\r\n        y: number;\r\n    }[];\r\n};\r\n\r\ntype VaraFontItem = {\r\n    paths: Array<{\r\n        w: number;\r\n        h: number;\r\n        my: number;\r\n        mx: number;\r\n        dx: number;\r\n        d: string;\r\n    }>;\r\n    w: number;\r\n};\r\n\r\ntype ObjectKeys<T> = T extends object\r\n    ? (keyof T)[]\r\n    : T extends number\r\n    ? []\r\n    : T extends Array<any> | string\r\n    ? string[]\r\n    : never;\r\n\r\nclass Vara {\r\n    elementName: string;\r\n    element: HTMLElement;\r\n    fontSource: string;\r\n    options: VaraGeneralOptions;\r\n    textItems: VaraText[];\r\n    renderData: RenderData[];\r\n    rendered: boolean;\r\n    defaultOptions: Required<VaraGeneralOptions>;\r\n    defaultCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    canvasWidth: number;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    fontProperties!: {\r\n        s: number;\r\n        // TODO: add other properties\r\n        slc: 'round';\r\n        bsw: number;\r\n        lh: number;\r\n        space: number;\r\n        tf: number;\r\n    };\r\n    WHITESPACE: number;\r\n    SCALEBASE: number;\r\n\r\n    constructor(\r\n        elem: string,\r\n        fontSource: string,\r\n        text: VaraText[],\r\n        options: VaraGeneralOptions\r\n    ) {\r\n        this.elementName = elem;\r\n        this.element = document.querySelector(elem) as HTMLElement;\r\n        this.fontSource = fontSource;\r\n        this.options = options;\r\n        this.textItems = text;\r\n        this.renderData = text;\r\n        this.rendered = false;\r\n        this.fontCharacters = {};\r\n        this.canvasWidth = 0;\r\n\r\n        this.defaultOptions = {\r\n            fontSize: 21,\r\n            strokeWidth: 0.5,\r\n            color: '#000',\r\n            duration: 1000,\r\n            textAlign: 'left',\r\n            autoAnimation: true,\r\n            queued: true,\r\n            delay: 0,\r\n            breakWord: false,\r\n            letterSpacing: {\r\n                global: 0,\r\n            },\r\n            width: this.element.getBoundingClientRect().width,\r\n        };\r\n\r\n        this.defaultCharacters = {\r\n            '63': {\r\n                paths: [\r\n                    {\r\n                        w: 8.643798828125,\r\n                        h: 14.231731414794922,\r\n                        my: 22.666500004827977,\r\n                        mx: 0,\r\n                        dx: 0,\r\n                        d:\r\n                            'm 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85',\r\n                    },\r\n                    {\r\n                        w: 1.103759765625,\r\n                        h: 1.549820899963379,\r\n                        my: 8.881500004827977,\r\n                        dx: 0,\r\n                        mx: 1,\r\n                        d:\r\n                            'm 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z',\r\n                    },\r\n                ],\r\n                w: 8.643798828125,\r\n            },\r\n        };\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = 800;\r\n        this.canvas.height = 800;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        this.element.appendChild(this.canvas);\r\n        this.WHITESPACE = 10;\r\n        this.SCALEBASE = 16;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.normalizeOptions();\r\n\r\n        const xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', this.fontSource, true);\r\n        xmlhttp.onreadystatechange = () => {\r\n            if (xmlhttp.readyState == 4) {\r\n                if (xmlhttp.status == 200) {\r\n                    const contents = JSON.parse(xmlhttp.responseText);\r\n                    this.fontCharacters = contents.c;\r\n                    this.fontProperties = contents.p;\r\n                    this.preRender();\r\n                    this.render();\r\n                }\r\n            }\r\n        };\r\n        xmlhttp.send(null);\r\n    }\r\n\r\n    preRender() {\r\n        let svg = this.createSVGNode('svg', {\r\n            width: '100',\r\n            height: '100',\r\n        });\r\n        svg.style.position = 'absolute';\r\n        svg.style.zIndex = '-100';\r\n        svg.style.opacity = '0';\r\n        svg.style.top = '0';\r\n\r\n        document.body.appendChild(svg);\r\n        let svgPathData = this.createSVGNode('path', {\r\n            d: '',\r\n        }) as SVGPathElement;\r\n        svg.appendChild(svgPathData);\r\n        this.objectKeys(this.fontCharacters).forEach(char => {\r\n            this.fontCharacters[char].paths.forEach((path, i) => {\r\n                svgPathData.setAttributeNS(null, 'd', path.d);\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].dx = svgPathData.getBoundingClientRect().x;\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.calculatePositions(this.renderData[1]);\r\n        this.draw(this.renderData[1]);\r\n    }\r\n\r\n    draw(_textItem: RenderData) {\r\n        // path - \"d\": \"m 0,0 c 1.677946,-5.44834,5.875964,-14.09066,3.788545,-14.26551,-1.909719,-0.15996,-2.796112,9.62055,-3.788545,14.26551 z\"\r\n        const textItem = <Required<RenderData>>_textItem;\r\n        this.ctx.strokeStyle = textItem.color;\r\n        this.ctx.lineWidth = textItem.strokeWidth;\r\n        this.ctx.fillStyle = 'transparent';\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n        let top = 0;\r\n\r\n        let scale = textItem.fontSize / this.SCALEBASE;\r\n\r\n        textItem.render.forEach(textLine => {\r\n            let left = textLine.x/2;\r\n            \r\n            textLine.text.split('').forEach(letter => {\r\n                let charCode = letter.charCodeAt(0);\r\n                if (letter === ' ') {\r\n                    left += this.WHITESPACE;\r\n                } else if (this.fontCharacters[charCode]) {\r\n                    this.ctx.save();\r\n                    this.ctx.scale(scale, scale);\r\n                    this.fontCharacters[charCode].paths.forEach(path => {\r\n                        let processedPath = this.processPath(path.d, left + path.mx - path.dx, textLine.y + top + 20 - path.my + 1)\r\n                        this.ctx.stroke(new Path2D(processedPath));\r\n                    });\r\n                    left += this.fontCharacters[charCode].w;\r\n                    this.ctx.restore();\r\n                }\r\n            });\r\n            top+= 30;\r\n        })\r\n    }\r\n\r\n    normalizeOptions() {\r\n        this.options = this.options || {};\r\n\r\n        this.objectKeys(this.defaultOptions).forEach(optionKey => {\r\n            if (this.options[optionKey] === undefined) {\r\n                // @ts-ignore\r\n                this.options[optionKey] = this.defaultOptions[optionKey];\r\n            }\r\n        });\r\n\r\n        this.renderData.forEach((textItem, i) => {\r\n            if (typeof textItem === 'string') {\r\n                this.renderData[i] = {\r\n                    text: textItem,\r\n                    ...this.defaultOptions,\r\n                };\r\n            } else if (typeof textItem === 'object') {\r\n                this.objectKeys(this.options).forEach(option => {\r\n                    if (textItem[option] === undefined)\r\n                        // @ts-ignore\r\n                        textItem[option] = this.options[option];\r\n                });\r\n            }\r\n        });\r\n\r\n        Object.keys(this.defaultCharacters).forEach(character => {\r\n            if (this.fontCharacters[character] === undefined) {\r\n                this.fontCharacters[character] = this.defaultCharacters[\r\n                    character\r\n                ];\r\n            }\r\n        });\r\n    }\r\n\r\n    calculatePositions(_textItem: RenderData) {\r\n        const textItem = <Required<RenderData>>_textItem;\r\n        let scale = textItem.fontSize / this.SCALEBASE;\r\n        // TODO: Create non breaking text\r\n        if (!textItem.breakWord) {\r\n            const textBlock =\r\n                typeof textItem.text === 'string'\r\n                    ? [textItem.text]\r\n                    : textItem.text;\r\n\r\n            const breakedTextBlock = textBlock.map(line => {\r\n                return line.split(' ');\r\n            });\r\n\r\n            const lines: {\r\n                text: string;\r\n                width: number;\r\n            }[] = [{\r\n                text: \"\",\r\n                width: 0\r\n            }];\r\n            breakedTextBlock.forEach(line => {\r\n                let spaceWidth = 0;\r\n                line.forEach(word => {\r\n                    let wordWidth = 0;\r\n\r\n                    word.split('').forEach(letter => {\r\n                        const charCode = letter.charCodeAt(0);\r\n\r\n                        const currentLetter =\r\n                            this.fontCharacters[charCode] ||\r\n                            this.fontCharacters['63'];\r\n                        let pathPositionCorrection = currentLetter.paths.reduce((a,c) => a+c.mx-c.dx, 0)\r\n                        wordWidth += (currentLetter.w + pathPositionCorrection) * scale;\r\n                    });\r\n\r\n                    if (lines[lines.length-1].width + wordWidth + spaceWidth + textItem.x*scale > textItem.width) {\r\n                        lines.push({\r\n                            text: word,\r\n                            width: wordWidth\r\n                        });\r\n                        spaceWidth = 0;\r\n                    } else {\r\n                        lines[lines.length - 1] = {\r\n                            text: lines[lines.length-1].text+word,\r\n                            width: lines[lines.length-1].width+wordWidth\r\n                        };\r\n                        spaceWidth+= this.WHITESPACE * scale;\r\n                        lines[lines.length - 1].text += ' ';\r\n                    }\r\n                });\r\n            });\r\n\r\n            lines.forEach(line => {\r\n                console.log(line.text, line.width)\r\n                let x = textItem.x;\r\n                if(textItem.textAlign === \"center\") {\r\n                    console.log(line.width, (textItem.width - line.width)/2);\r\n                    x = (textItem.width - line.width)/2;\r\n                }\r\n                if (textItem.render) {\r\n                    textItem.render.push({\r\n                        text: line.text,\r\n                        x: x,\r\n                        y: textItem.y,\r\n                    });\r\n                } else {\r\n                    textItem.render = [\r\n                        {\r\n                            text: line.text,\r\n                            x: x,\r\n                            y: textItem.y,\r\n                        },\r\n                    ];\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    createSVGNode(n: string, v: { [x: string]: string }) {\r\n        const e = document.createElementNS('http://www.w3.org/2000/svg', n);\r\n        for (var p in v)\r\n            e.setAttributeNS(\r\n                null,\r\n                p.replace(/[A-Z]/g, function(m) {\r\n                    return '-' + m.toLowerCase();\r\n                }),\r\n                v[p]\r\n            );\r\n        return e;\r\n    }\r\n\r\n    processPath(path:string, x=0, y=0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + 1 + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n\r\n    objectKeys<T>(x: T) {\r\n        let keys = Object.keys(x) as ObjectKeys<T>;\r\n        return keys;\r\n    }\r\n}\r\n\r\nclass Group {\r\n    items: any[];\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor() {\r\n        this.items = [];\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n\r\nif (window) {\r\n    (<any>window).Vara = Vara;\r\n}\r\n"],"names":["window","Vara","elem","fontSource","text","options","elementName","element","document","querySelector","textItems","renderData","rendered","fontCharacters","canvasWidth","defaultOptions","fontSize","strokeWidth","color","duration","textAlign","autoAnimation","queued","delay","breakWord","letterSpacing","global","width","this","getBoundingClientRect","defaultCharacters","paths","w","h","my","mx","dx","d","canvas","createElement","height","ctx","getContext","appendChild","WHITESPACE","SCALEBASE","init","normalizeOptions","xmlhttp","XMLHttpRequest","open","onreadystatechange","readyState","status","contents","JSON","parse","responseText","_this","c","fontProperties","p","preRender","render","send","svg","createSVGNode","style","position","zIndex","opacity","top","body","svgPathData","objectKeys","forEach","char","_this2","path","i","setAttributeNS","x","calculatePositions","draw","_textItem","textItem","strokeStyle","lineWidth","fillStyle","lineCap","lineJoin","scale","textLine","left","split","letter","charCode","charCodeAt","_this3","save","processedPath","processPath","y","stroke","Path2D","restore","optionKey","undefined","_this4","option","Object","keys","character","breakedTextBlock","map","line","lines","spaceWidth","word","wordWidth","currentLetter","_this5","pathPositionCorrection","reduce","a","length","push","console","log","n","v","e","createElementNS","replace","m","toLowerCase","svgPath","join"],"mappings":"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"}
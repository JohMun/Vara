{"version":3,"file":"vara.umd.production.min.js","sources":["../src/utils/constants.ts","../src/types.ts","../src/utils/renderbase.ts","../src/utils/letterpart.ts","../src/utils/letter.ts","../src/utils/line.ts","../src/utils/block.ts","../src/utils/renderitem.ts","../src/index.ts"],"sourcesContent":["export const SCALEBASE = 16;\r\nexport const WHITESPACE = 10;","import Block from \"./utils/block\";\r\nimport Letter from \"./utils/letter\";\r\nimport LetterPart from \"./utils/letterpart\";\r\nimport Line from \"./utils/line\";\r\nimport RenderItem from \"./utils/renderitem\";\r\n\r\nexport type VaraGeneralOptions = {\r\n    fontSize?: number;\r\n    strokeWidth?: number;\r\n    color?: string;\r\n    duration?: number;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    autoAnimation?: boolean;\r\n    queued?: boolean;\r\n    delay?: number;\r\n    letterSpacing?:\r\n        | {\r\n              [x: string]: number;\r\n          }\r\n        | number;\r\n    breakWord?: boolean;\r\n    width?: number;\r\n    lineHeight?: number;\r\n};\r\n\r\nexport type VaraTextOptions = VaraGeneralOptions & {\r\n    id?: string | number | false;\r\n    x?: number;\r\n    y?: number;\r\n    absolutePosition?: boolean;\r\n};\r\n\r\nexport type VaraText = VaraTextOptions & {\r\n    text: string;\r\n};\r\n\r\nexport type RenderData = RenderItem[];\r\n\r\nexport type VaraFontItem = {\r\n    paths: Array<{\r\n        w: number;\r\n        h: number;\r\n        my: number;\r\n        mx: number;\r\n        dx: number;\r\n        d: string;\r\n        pl: number;\r\n    }>;\r\n    w: number;\r\n};\r\n\r\nexport type ObjectKeys<T> = T extends object\r\n    ? (keyof T)[]\r\n    : T extends number\r\n    ? []\r\n    : T extends Array<any> | string\r\n    ? string[]\r\n    : never;\r\n\r\nexport const BLOCK_COMPOSITION = [\"block\",\"line\",\"letter\",\"letterPart\"] as const;\r\n\r\nexport type BlockComposition = typeof BLOCK_COMPOSITION;\r\n\r\nexport type BlockName = BlockComposition[number];\r\n\r\nexport type Blocks = Block | Line | Letter | LetterPart;\r\n\r\nexport type BlockMapped = {\r\n    \"block\" : Block,\r\n    \"line\": Line,\r\n    \"letter\": Letter,\r\n    \"letterPart\": LetterPart\r\n}","import { BlockMapped, BlockName, Blocks, BLOCK_COMPOSITION } from '../types';\r\n\r\ninterface RenderItemProps {\r\n    ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks;\r\n}\r\n\r\nexport default class RenderBase {\r\n    ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks | null;\r\n    name: BlockName;\r\n\r\n    constructor(props: RenderItemProps) {\r\n        this.ctx = props.ctx;\r\n        this.parent = props.parent ?? null;\r\n        this.name = 'block';\r\n    }\r\n\r\n    getParent<T extends BlockName>(parentName: T, current: Blocks): BlockMapped[T] | false {\r\n        const parentIndex = BLOCK_COMPOSITION.indexOf(parentName);\r\n        const currentItemIndex = BLOCK_COMPOSITION.indexOf(this.name);\r\n        if (parentIndex < currentItemIndex) {\r\n            if (current.name === parentName) {\r\n                return current as BlockMapped[T];\r\n            } else {\r\n                if (current.parent)\r\n                    return this.getParent(parentName, current?.parent);\r\n                else return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","import { BlockName } from '../types';\r\nimport Block from './block';\r\nimport Letter from './letter';\r\nimport RenderBase from './renderbase';\r\n\r\nexport interface LetterPartProps {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Letter;\r\n}\r\n\r\nexport default class LetterPart extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    name: BlockName;\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterPartProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.path = props.path;\r\n        this.pathLength = props.pathLength;\r\n        this.dashOffset = props.dashOffset;\r\n        this.width = props.width;\r\n\r\n        this.name = 'letterPart';\r\n\r\n        this.rootBlock = this.getParent('block', this) as Block;\r\n    }\r\n\r\n    /**\r\n     * Paints the path\r\n     */\r\n    paint() {\r\n        // console.log(this.x,this.y);\r\n        this.ctx.save();\r\n        this.ctx.stroke(\r\n            new Path2D(this.processPath(this.path, this.x, this.y))\r\n        );\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Increments the dashOffset and then paints the path.\r\n     */\r\n    draw(delta: number) {\r\n        const pathDuration =\r\n            ((this.pathLength / this.rootBlock.totalPathLength) *\r\n                this.rootBlock.options.duration) /\r\n            1000;\r\n\r\n        const speed = this.pathLength / pathDuration;\r\n\r\n        this.ctx.save();\r\n        this.ctx.lineDashOffset = 1;\r\n        this.ctx.setLineDash([this.dashOffset, this.pathLength + 1]);\r\n        this.dashOffset += speed * delta;\r\n        this.paint();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n}\r\n","import { BlockName } from \"../types\";\r\nimport Block from \"./block\";\r\nimport LetterPart, { LetterPartProps } from \"./letterpart\";\r\nimport Line from \"./line\";\r\nimport RenderBase from \"./renderbase\";\r\n\r\nexport interface LetterProps {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Line;\r\n}\r\n\r\nexport default class Letter extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n\r\n    parts: LetterPart[];\r\n\r\n    drawnParts: LetterPart[];\r\n    name: BlockName;\r\n\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.width = props.width;\r\n        this.parts = [];\r\n        this.drawnParts = [];\r\n        this.name = \"letter\"\r\n\r\n        this.rootBlock = this.getParent(\"block\", this) as Block;\r\n    }\r\n\r\n    setPosition(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Add a new part to the queue\r\n     * @param part The part to be added\r\n     */\r\n    addPart(part: Omit<LetterPartProps,\"ctx\"|\"parent\">) {\r\n        this.parts.push(new LetterPart({\r\n            ...part,\r\n            ctx: this.ctx,\r\n            parent: this,\r\n        }));\r\n    \r\n        \r\n        // Update the total path length stored in the main block.\r\n        if(this.rootBlock){\r\n            this.rootBlock.modifyPathLength(part.pathLength, \"increment\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a part has been drawn completely.\r\n     * \r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.parts.shift();\r\n        if (removedItem) this.drawnParts.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current letter\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, previousRAFTime: number) {\r\n\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale, this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        const delta = (rafTime - previousRAFTime) / 1000;\r\n\r\n        if (this.parts.length > 0) {\r\n            const part = this.parts[0];\r\n            if (part.dashOffset > part.pathLength) {\r\n                this.dequeue();\r\n            } else {\r\n                part.draw(delta);\r\n            }\r\n        }\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        })\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n\r\n    /**\r\n     * Paints the paths whose animations are complete\r\n     */\r\n    paint() {\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale,this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        })\r\n\r\n        this.ctx.restore();\r\n    }\r\n}","import { BlockName } from \"../types\";\r\nimport Block from \"./block\";\r\nimport Letter, { LetterProps } from \"./letter\";\r\nimport RenderBase from \"./renderbase\";\r\n\r\nexport interface LineProps {\r\n    x: number;\r\n    y: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Block;\r\n}\r\n\r\nexport default class Line extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    letters: Letter[];\r\n    drawnLetters: Letter[];\r\n    name: BlockName;\r\n\r\n    constructor(props: LineProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.ctx = props.ctx;\r\n        this.letters = [];\r\n        this.drawnLetters = [];\r\n        this.name = \"line\";\r\n    }\r\n\r\n    addLetter(letter: Omit<LetterProps, \"ctx\"|\"parent\">) {\r\n        console.log('adding letter', this.name);\r\n        const newLetter = new Letter({\r\n            ...letter,\r\n            parent: this,\r\n            ctx: this.ctx\r\n        })\r\n        this.letters.push(newLetter);\r\n\r\n        return newLetter;\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a letter has been drawn completely.\r\n     * The removed item is moved to the drawnLetters array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.letters.shift();\r\n        if (removedItem) this.drawnLetters.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current line\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, prevRAFTime: number){\r\n        this.ctx.save();\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        if(this.letters.length > 0) {\r\n            const currentLetter = this.letters[0];\r\n            currentLetter.render(rafTime, prevRAFTime);\r\n\r\n            if(currentLetter.parts.length === 0) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n\r\n        this.drawnLetters.forEach(letter => {\r\n            letter.paint();\r\n        })\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    paint() {\r\n        this.ctx.save();\r\n        this.ctx.translate(this.x, this.y);\r\n        this.drawnLetters.forEach(letter => {\r\n            letter.paint();\r\n        })\r\n        this.ctx.restore();\r\n    }\r\n}","import { BlockName, VaraText } from '../types';\r\nimport { SCALEBASE } from './constants';\r\nimport Line, { LineProps } from './line';\r\nimport RenderBase from './renderbase';\r\n\r\ninterface BlockProps {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    options: Required<VaraText>;\r\n}\r\n\r\nexport default class Block extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    scale: number;\r\n\r\n    ctx: CanvasRenderingContext2D;\r\n    previousRAFTime: number;\r\n    lines: Line[];\r\n    drawnLines: Line[];\r\n    totalPathLength: number;\r\n    options: Required<VaraText>;\r\n\r\n    name: BlockName;\r\n\r\n    constructor(props: BlockProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.width = props.width;\r\n\r\n        this.lines = [];\r\n        this.drawnLines = [];\r\n        this.ctx = props.ctx;\r\n        this.previousRAFTime = 0;\r\n        this.totalPathLength = 0;\r\n        this.options = props.options;\r\n\r\n        this.name = 'block';\r\n\r\n        this.scale = props.options.fontSize / SCALEBASE;\r\n    }\r\n\r\n    /**\r\n     * Creates and adds a new line of text\r\n     * @param line The properties of the line to be added\r\n     */\r\n    addLine(line: Omit<LineProps, 'ctx' | 'parent'>) {\r\n        const newLine = new Line({\r\n            ...line,\r\n            ctx: this.ctx,\r\n            parent: this,\r\n        });\r\n\r\n        this.lines.push(newLine);\r\n\r\n        return newLine;\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a text line has been drawn completely.\r\n     * \r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.lines.shift();\r\n        if (removedItem) this.lines.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the total path length\r\n     * @param pathLength Path length that is to be incremented or decrement\r\n     * @param action Whether to increment or decrement\r\n     */\r\n    modifyPathLength(\r\n        pathLength: number,\r\n        action: 'increment' | 'decrement' = 'increment'\r\n    ) {\r\n        if (action === 'increment') {\r\n            this.totalPathLength += pathLength;\r\n        } else {\r\n            this.totalPathLength -= pathLength;\r\n        }\r\n        return this.totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Render the block\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number) {\r\n        if (this.previousRAFTime === 0) {\r\n            this.previousRAFTime = rafTime;\r\n        }\r\n\r\n        this.ctx.save();\r\n        this.ctx.strokeStyle = this.options.color;\r\n        this.ctx.lineWidth = this.options.strokeWidth;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n\r\n\r\n        this.drawnLines.forEach(line => {\r\n            line.paint();\r\n        });\r\n\r\n        if(this.lines.length > 0) {\r\n            const line = this.lines[0];\r\n            line.render(rafTime, this.previousRAFTime);\r\n            if(line.letters.length === 0) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n        this.ctx.restore();\r\n\r\n        this.previousRAFTime = rafTime;\r\n    }\r\n}\r\n","import { VaraFontItem, VaraText, VaraTextOptions } from '../types';\r\nimport Block from './block';\r\nimport { SCALEBASE, WHITESPACE } from './constants';\r\n\r\ninterface RenderItemProps {\r\n    textItem: VaraText;\r\n    options: Required<VaraTextOptions>;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    ctx: CanvasRenderingContext2D;\r\n}\r\n\r\nexport default class RenderItem {\r\n    textItem: Required<VaraText>;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    ctx: CanvasRenderingContext2D;\r\n    block: Block | null;\r\n    height: number;\r\n\r\n    constructor(props: RenderItemProps) {\r\n        this.textItem = {\r\n            ...props.options,\r\n            ...props.textItem,\r\n        };\r\n        console.log(this.textItem);\r\n        this.height = 0;\r\n        this.fontCharacters = props.fontCharacters;\r\n        this.ctx = props.ctx;\r\n        this.block = null;\r\n    }\r\n\r\n    generatePositions() {\r\n        let scale = this.textItem.fontSize / SCALEBASE;\r\n        this.height = 0;\r\n        // TODO: Create non breaking text\r\n        if (!this.textItem.breakWord) {\r\n            const textBlock =\r\n                typeof this.textItem.text === 'string'\r\n                    ? [this.textItem.text]\r\n                    : this.textItem.text;\r\n\r\n            const breakedTextBlock = textBlock.map(line => {\r\n                return line.split(' ');\r\n            });\r\n\r\n            const lines: {\r\n                text: string;\r\n                width: number;\r\n            }[] = [\r\n                {\r\n                    text: '',\r\n                    width: 0,\r\n                },\r\n            ];\r\n\r\n            breakedTextBlock.forEach(line => {\r\n                let spaceWidth = 0;\r\n                line.forEach(word => {\r\n                    let wordWidth = 0;\r\n\r\n                    word.split('').forEach(letter => {\r\n                        const charCode = letter.charCodeAt(0);\r\n\r\n                        const currentLetter =\r\n                            this.fontCharacters[charCode] ||\r\n                            this.fontCharacters['63'];\r\n                        let pathPositionCorrection = currentLetter.paths.reduce(\r\n                            (a, c) => a + c.mx - c.dx,\r\n                            0\r\n                        );\r\n                        wordWidth +=\r\n                            (currentLetter.w + pathPositionCorrection) * scale;\r\n                    });\r\n\r\n                    if (\r\n                        lines[lines.length - 1].width +\r\n                            wordWidth +\r\n                            5 * scale +\r\n                            spaceWidth +\r\n                            this.textItem.x * scale >\r\n                        this.textItem.width\r\n                    ) {\r\n                        lines.push({\r\n                            text: word + ' ',\r\n                            width: wordWidth,\r\n                        });\r\n                        spaceWidth = 0;\r\n                    } else {\r\n                        lines[lines.length - 1] = {\r\n                            text: lines[lines.length - 1].text + word,\r\n                            width: lines[lines.length - 1].width + wordWidth,\r\n                        };\r\n                        spaceWidth += WHITESPACE * scale;\r\n                        lines[lines.length - 1].text += ' ';\r\n                    }\r\n                });\r\n            });\r\n\r\n            let top = this.textItem.lineHeight;\r\n\r\n            const block = new Block({\r\n                width: this.textItem.width,\r\n                x: this.textItem.x,\r\n                y: this.textItem.y,\r\n                ctx: this.ctx,\r\n                options: this.textItem,\r\n            });\r\n\r\n            lines.forEach(line => {\r\n                let left = 0;\r\n                let x = 0,\r\n                    y = 0;\r\n                if (this.textItem.textAlign === 'center') {\r\n                    x = (this.textItem.width - line.width) / 2;\r\n                }\r\n\r\n                const lineClass = block.addLine({\r\n                    x,\r\n                    y,\r\n                });\r\n\r\n                line.text.split('').forEach(letter => {\r\n                    console.log(letter);\r\n                    if (letter === ' ') {\r\n                        left += WHITESPACE;\r\n                    } else {\r\n                        const currentLetter =\r\n                            this.fontCharacters[letter.charCodeAt(0)] ||\r\n                            this.fontCharacters['63'];\r\n\r\n                        const letterClass = lineClass.addLetter({\r\n                            x: left,\r\n                            y: top,\r\n                            width: currentLetter.w,\r\n                        });\r\n\r\n                        currentLetter.paths.forEach(path => {\r\n                            letterClass.addPart({\r\n                                path: path.d,\r\n                                x: path.mx - path.dx,\r\n                                y: -path.my,\r\n                                pathLength: path.pl,\r\n                                dashOffset: 0,\r\n                                width: path.w,\r\n                            });\r\n                        });\r\n                        left += currentLetter.w;\r\n                    }\r\n                });\r\n                top += this.textItem.lineHeight;\r\n                this.height += this.textItem.lineHeight * scale;\r\n            });\r\n\r\n            this.block = block;\r\n        }\r\n    }\r\n\r\n    render(rafTime:number){\r\n        if(this.block) {\r\n            this.block.render(rafTime);\r\n        }\r\n    }\r\n\r\n    rendered() {\r\n        return this.block?.lines.length === 0;\r\n    }\r\n}\r\n","import {\r\n    VaraGeneralOptions,\r\n    VaraText,\r\n    RenderData,\r\n    VaraFontItem,\r\n    ObjectKeys,\r\n    VaraTextOptions,\r\n} from './types';\r\nimport RenderItem from './utils/renderitem';\r\n\r\nexport default class Vara {\r\n    elementName: string;\r\n    element: HTMLElement;\r\n    fontSource: string;\r\n    options: VaraGeneralOptions;\r\n    textItems: VaraText[];\r\n    renderData: {\r\n        queued: RenderData;\r\n        nonQueued: RenderData;\r\n    };\r\n    rendered: boolean;\r\n    defaultOptions: Required<VaraGeneralOptions>;\r\n    defaultCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    canvasWidth: number;\r\n    contextHeight: number;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    fontProperties!: {\r\n        s: number;\r\n        // TODO: add other properties\r\n        slc: 'round';\r\n        bsw: number;\r\n        lh: number;\r\n        space: number;\r\n        tf: number;\r\n    };\r\n    onDrawF?: (fn?: Required<RenderData>) => void;\r\n    WHITESPACE: number;\r\n    SCALEBASE: number;\r\n\r\n    constructor(\r\n        elem: string,\r\n        fontSource: string,\r\n        text: VaraText[],\r\n        options: VaraGeneralOptions\r\n    ) {\r\n        this.elementName = elem;\r\n        this.element = document.querySelector(elem) as HTMLElement;\r\n        this.fontSource = fontSource;\r\n        this.options = options;\r\n        this.textItems = text;\r\n        this.renderData = {\r\n            nonQueued: [],\r\n            queued: [],\r\n        };\r\n        this.rendered = false;\r\n        this.fontCharacters = {};\r\n        this.canvasWidth = 0;\r\n\r\n        this.defaultOptions = {\r\n            fontSize: 21,\r\n            strokeWidth: 0.5,\r\n            color: '#000',\r\n            duration: 1000,\r\n            textAlign: 'left',\r\n            autoAnimation: true,\r\n            queued: true,\r\n            delay: 0,\r\n            breakWord: false,\r\n            letterSpacing: {\r\n                global: 0,\r\n            },\r\n            width: this.element.getBoundingClientRect().width,\r\n            lineHeight: 30,\r\n        };\r\n\r\n        this.defaultCharacters = {\r\n            '63': {\r\n                paths: [\r\n                    {\r\n                        w: 8.6437,\r\n                        h: 14.23173,\r\n                        my: 22.6665,\r\n                        mx: 0,\r\n                        dx: 0,\r\n                        d:\r\n                            'm 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85',\r\n                        pl: 1,\r\n                    },\r\n                    {\r\n                        w: 1.1037,\r\n                        h: 1.5498,\r\n                        my: 8.8815,\r\n                        dx: 0,\r\n                        mx: 1,\r\n                        d:\r\n                            'm 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z',\r\n                        pl: 1,\r\n                    },\r\n                ],\r\n                w: 8.6437,\r\n            },\r\n        };\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = 800;\r\n        this.canvas.height = 800;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        this.element.appendChild(this.canvas);\r\n        this.WHITESPACE = 10;\r\n        this.SCALEBASE = 16;\r\n\r\n        this.contextHeight = 0;\r\n\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.normalizeOptions();\r\n\r\n        const xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', this.fontSource, true);\r\n        xmlhttp.onreadystatechange = () => {\r\n            if (xmlhttp.readyState == 4) {\r\n                if (xmlhttp.status == 200) {\r\n                    const contents = JSON.parse(xmlhttp.responseText);\r\n                    this.fontCharacters = contents.c;\r\n                    this.fontProperties = contents.p;\r\n                    this.preRender();\r\n                    this.render();\r\n                }\r\n            }\r\n        };\r\n        xmlhttp.send(null);\r\n    }\r\n\r\n    onDraw(fn: (a?: Required<RenderData>) => void) {\r\n        this.onDrawF = fn;\r\n    }\r\n\r\n    /**\r\n     * Sets default option value for all existing option properties.\r\n     * If an option value is not provided, then it will first check if it is given in the global options, if not it will use the default option.\r\n     */\r\n    private normalizeOptions() {\r\n        this.options = this.options || {};\r\n\r\n        this.options = {\r\n            ...this.defaultOptions,\r\n            ...this.options,\r\n        };\r\n\r\n        Object.keys(this.defaultCharacters).forEach(character => {\r\n            if (this.fontCharacters[character] === undefined) {\r\n                this.fontCharacters[character] = this.defaultCharacters[\r\n                    character\r\n                ];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs some actions before rendering starts. These include finding the pathLength of each path and generating the render data.\r\n     */\r\n    private preRender() {\r\n        let svg = this.createSVGNode('svg', {\r\n            width: '100',\r\n            height: '100',\r\n        });\r\n        svg.style.position = 'absolute';\r\n        svg.style.zIndex = '-100';\r\n        svg.style.opacity = '0';\r\n        svg.style.top = '0';\r\n\r\n        document.body.appendChild(svg);\r\n        let svgPathData = this.createSVGNode('path', {\r\n            d: '',\r\n        }) as SVGPathElement;\r\n        svg.appendChild(svgPathData);\r\n\r\n        this.objectKeys(this.fontCharacters).forEach(char => {\r\n            this.fontCharacters[char].paths.forEach((path, i) => {\r\n                svgPathData.setAttributeNS(null, 'd', path.d);\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].dx = svgPathData.getBoundingClientRect().x;\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].pl = svgPathData.getTotalLength();\r\n            });\r\n        });\r\n\r\n        this.textItems.forEach(item => {\r\n            const renderItem = new RenderItem({\r\n                fontCharacters: this.fontCharacters,\r\n                options: this.options as Required<VaraTextOptions>,\r\n                textItem: item,\r\n                ctx: this.ctx,\r\n            });\r\n\r\n            renderItem.generatePositions();\r\n\r\n            if (item.queued) {\r\n                this.renderData.queued.push(renderItem);\r\n            } else {\r\n                this.renderData.nonQueued.push(renderItem);\r\n            }\r\n        });\r\n    }\r\n\r\n    private render(rafTime = 0) {\r\n        let canvasHeight = this.calculateCanvasHeight();\r\n        if (canvasHeight !== this.canvas.height) {\r\n            this.canvas.height = canvasHeight;\r\n        }\r\n        this.ctx.clearRect(0, 0, this.canvas.width, canvasHeight);\r\n\r\n        this.renderData.nonQueued.forEach(item => {\r\n            item.render(rafTime);\r\n        });\r\n\r\n        if (this.renderData.queued.length > 0) {\r\n            const queueHead = this.renderData.queued[0];\r\n            queueHead.render(rafTime);\r\n            if (queueHead.rendered()) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n\r\n        window.requestAnimationFrame(time => this.render(time));\r\n    }\r\n    \r\n    /**\r\n     * Remove the first item from the queue. Used when a block has been drawn completely.\r\n     * The removed item is moved to the drawnLetters array\r\n     */\r\n    private dequeue() {\r\n        const removedItem = this.renderData.queued.shift();\r\n        if (removedItem) this.renderData.nonQueued.push(removedItem);\r\n    }\r\n\r\n    // TODO: Make proper calculation function.\r\n    calculateCanvasHeight() {\r\n        let height = 0;\r\n        [...this.renderData.nonQueued, ...this.renderData.queued].forEach(\r\n            item => {\r\n                if (item.height && item.textItem.y) {\r\n                    height += item.height + item.textItem.y;\r\n                }\r\n            }\r\n        );\r\n        return height + 50;\r\n    }\r\n\r\n    /**\r\n     * Creates and returns an SVG element\r\n     * @param n The name of the SVG node to be created\r\n     * @param v The attributes of the node\r\n     */\r\n\r\n    createSVGNode(n: string, v: { [x: string]: string }) {\r\n        const e = document.createElementNS('http://www.w3.org/2000/svg', n);\r\n        for (var p in v)\r\n            e.setAttributeNS(\r\n                null,\r\n                p.replace(/[A-Z]/g, function(m) {\r\n                    return '-' + m.toLowerCase();\r\n                }),\r\n                v[p]\r\n            );\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Modifies the move to command of a given path and returns it.\r\n     * @param path The path \"d\" property\r\n     * @param x The x co-ordinate\r\n     * @param y The y co-ordinate\r\n     */\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + 1 + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n\r\n    objectKeys<T>(x: T) {\r\n        let keys = Object.keys(x) as ObjectKeys<T>;\r\n        return keys;\r\n    }\r\n\r\n    boundRect(x: number, y: number, w: number, h = 10) {\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = 'rgba(209, 56, 61,0.4)';\r\n        this.ctx.fillRect(x, y, w, h);\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\nif (window) {\r\n    (<any>window).Vara = Vara;\r\n}\r\n"],"names":["BLOCK_COMPOSITION","RenderBase","props","ctx","parent","name","getParent","parentName","current","indexOf","this","LetterPart","x","y","path","pathLength","dashOffset","width","rootBlock","_this","paint","save","stroke","Path2D","processPath","restore","draw","delta","speed","totalPathLength","options","duration","lineDashOffset","setLineDash","svgPath","split","join","Letter","parts","drawnParts","setPosition","addPart","part","push","modifyPathLength","dequeue","removedItem","shift","render","rafTime","previousRAFTime","scale","translate","length","forEach","drawnPart","Line","letters","drawnLetters","addLetter","letter","console","log","newLetter","prevRAFTime","currentLetter","Block","lines","drawnLines","fontSize","addLine","line","newLine","action","strokeStyle","color","lineWidth","strokeWidth","lineCap","lineJoin","RenderItem","textItem","height","fontCharacters","block","generatePositions","breakWord","breakedTextBlock","text","map","spaceWidth","word","wordWidth","charCode","charCodeAt","pathPositionCorrection","paths","reduce","a","c","mx","dx","w","top","lineHeight","left","textAlign","lineClass","letterClass","d","my","pl","rendered","Vara","elem","fontSource","elementName","element","document","querySelector","textItems","renderData","nonQueued","queued","canvasWidth","defaultOptions","autoAnimation","delay","letterSpacing","global","getBoundingClientRect","defaultCharacters","h","canvas","createElement","getContext","appendChild","WHITESPACE","SCALEBASE","contextHeight","init","normalizeOptions","xmlhttp","XMLHttpRequest","open","onreadystatechange","readyState","status","contents","JSON","parse","responseText","fontProperties","p","preRender","send","onDraw","fn","onDrawF","Object","keys","character","undefined","_this2","svg","createSVGNode","style","position","zIndex","opacity","body","svgPathData","objectKeys","char","_this3","i","setAttributeNS","getTotalLength","item","renderItem","canvasHeight","calculateCanvasHeight","clearRect","queueHead","window","requestAnimationFrame","time","_this4","n","v","e","createElementNS","replace","m","toLowerCase","boundRect","fillStyle","fillRect","fill"],"mappings":"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"}
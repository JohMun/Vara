{"version":3,"file":"vara.umd.production.min.js","sources":["../src/index.ts"],"sourcesContent":["type VaraGeneralOptions = {\r\n    fontSize?: number;\r\n    strokeWidth?: number;\r\n    color?: string;\r\n    duration?: number;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    autoAnimation?: boolean;\r\n    queued?: boolean;\r\n    delay?: number;\r\n    letterSpacing?:\r\n        | {\r\n              [x: string]: number;\r\n          }\r\n        | number;\r\n    breakWord?: boolean;\r\n    width?: number;\r\n    lineHeight?: number;\r\n};\r\n\r\ntype VaraTextOptions = VaraGeneralOptions & {\r\n    id?: string | number | false;\r\n    x?: number;\r\n    y?: number;\r\n    absolutePosition?: boolean;\r\n};\r\n\r\ntype VaraText = VaraTextOptions & {\r\n    text: string;\r\n};\r\n\r\ntype RenderData = VaraText & {\r\n    render?: {\r\n        path: string;\r\n        x: number;\r\n        y: number;\r\n        pathLength: number;\r\n        dashOffset: number;\r\n    }[];\r\n    currentlyDrawing?: number;\r\n    startTime?: number | false;\r\n    height?: number;\r\n};\r\n\r\ntype VaraFontItem = {\r\n    paths: Array<{\r\n        w: number;\r\n        h: number;\r\n        my: number;\r\n        mx: number;\r\n        dx: number;\r\n        d: string;\r\n        pl: number;\r\n    }>;\r\n    w: number;\r\n};\r\n\r\ntype ObjectKeys<T> = T extends object\r\n    ? (keyof T)[]\r\n    : T extends number\r\n    ? []\r\n    : T extends Array<any> | string\r\n    ? string[]\r\n    : never;\r\n\r\nclass Vara {\r\n    elementName: string;\r\n    element: HTMLElement;\r\n    fontSource: string;\r\n    options: VaraGeneralOptions;\r\n    textItems: VaraText[];\r\n    renderData: RenderData[];\r\n    rendered: boolean;\r\n    defaultOptions: Required<VaraGeneralOptions>;\r\n    defaultCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    canvasWidth: number;\r\n    contextHeight: number;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    fontProperties!: {\r\n        s: number;\r\n        // TODO: add other properties\r\n        slc: 'round';\r\n        bsw: number;\r\n        lh: number;\r\n        space: number;\r\n        tf: number;\r\n    };\r\n    WHITESPACE: number;\r\n    SCALEBASE: number;\r\n\r\n    constructor(\r\n        elem: string,\r\n        fontSource: string,\r\n        text: VaraText[],\r\n        options: VaraGeneralOptions\r\n    ) {\r\n        this.elementName = elem;\r\n        this.element = document.querySelector(elem) as HTMLElement;\r\n        this.fontSource = fontSource;\r\n        this.options = options;\r\n        this.textItems = text;\r\n        this.renderData = text;\r\n        this.rendered = false;\r\n        this.fontCharacters = {};\r\n        this.canvasWidth = 0;\r\n\r\n        this.defaultOptions = {\r\n            fontSize: 21,\r\n            strokeWidth: 0.5,\r\n            color: '#000',\r\n            duration: 1000,\r\n            textAlign: 'left',\r\n            autoAnimation: true,\r\n            queued: true,\r\n            delay: 0,\r\n            breakWord: false,\r\n            letterSpacing: {\r\n                global: 0,\r\n            },\r\n            width: this.element.getBoundingClientRect().width,\r\n            lineHeight: 30,\r\n        };\r\n\r\n        this.defaultCharacters = {\r\n            '63': {\r\n                paths: [\r\n                    {\r\n                        w: 8.643798828125,\r\n                        h: 14.231731414794922,\r\n                        my: 22.666500004827977,\r\n                        mx: 0,\r\n                        dx: 0,\r\n                        d:\r\n                            'm 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85',\r\n                        pl: 1,\r\n                    },\r\n                    {\r\n                        w: 1.103759765625,\r\n                        h: 1.549820899963379,\r\n                        my: 8.881500004827977,\r\n                        dx: 0,\r\n                        mx: 1,\r\n                        d:\r\n                            'm 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z',\r\n                        pl: 1,\r\n                    },\r\n                ],\r\n                w: 8.643798828125,\r\n            },\r\n        };\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = 800;\r\n        this.canvas.height = 800;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        this.element.appendChild(this.canvas);\r\n        this.WHITESPACE = 10;\r\n        this.SCALEBASE = 16;\r\n\r\n        this.contextHeight = 0;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.normalizeOptions();\r\n\r\n        const xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', this.fontSource, true);\r\n        xmlhttp.onreadystatechange = () => {\r\n            if (xmlhttp.readyState == 4) {\r\n                if (xmlhttp.status == 200) {\r\n                    const contents = JSON.parse(xmlhttp.responseText);\r\n                    this.fontCharacters = contents.c;\r\n                    this.fontProperties = contents.p;\r\n                    this.preRender();\r\n                    this.render();\r\n                    //window.requestAnimationFrame()\r\n                }\r\n            }\r\n        };\r\n        xmlhttp.send(null);\r\n    }\r\n\r\n    /**\r\n     * Sets default option value for all existing option properties.\r\n     * If an option value is not provided, then it will first check if it is given in the global options, if not it will use the default option.\r\n     */\r\n\r\n    normalizeOptions() {\r\n        this.options = this.options || {};\r\n\r\n        this.objectKeys(this.defaultOptions).forEach(optionKey => {\r\n            if (this.options[optionKey] === undefined) {\r\n                // @ts-ignore\r\n                this.options[optionKey] = this.defaultOptions[optionKey];\r\n            }\r\n        });\r\n\r\n        this.renderData.forEach((textItem, i) => {\r\n            if (typeof textItem === 'string') {\r\n                this.renderData[i] = {\r\n                    text: textItem,\r\n                    ...this.defaultOptions,\r\n                };\r\n            } else if (typeof textItem === 'object') {\r\n                this.objectKeys(this.options).forEach(option => {\r\n                    if (textItem[option] === undefined)\r\n                        // @ts-ignore\r\n                        textItem[option] = this.options[option];\r\n                });\r\n            }\r\n        });\r\n\r\n        Object.keys(this.defaultCharacters).forEach(character => {\r\n            if (this.fontCharacters[character] === undefined) {\r\n                this.fontCharacters[character] = this.defaultCharacters[\r\n                    character\r\n                ];\r\n            }\r\n        });\r\n    }\r\n\r\n    preRender() {\r\n        let svg = this.createSVGNode('svg', {\r\n            width: '100',\r\n            height: '100',\r\n        });\r\n        svg.style.position = 'absolute';\r\n        svg.style.zIndex = '-100';\r\n        svg.style.opacity = '0';\r\n        svg.style.top = '0';\r\n\r\n        document.body.appendChild(svg);\r\n        let svgPathData = this.createSVGNode('path', {\r\n            d: '',\r\n        }) as SVGPathElement;\r\n        svg.appendChild(svgPathData);\r\n        this.objectKeys(this.fontCharacters).forEach(char => {\r\n            this.fontCharacters[char].paths.forEach((path, i) => {\r\n                svgPathData.setAttributeNS(null, 'd', path.d);\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].dx = svgPathData.getBoundingClientRect().x;\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].pl = svgPathData.getTotalLength();\r\n            });\r\n        });\r\n\r\n        this.renderData.forEach(item => {\r\n            item.currentlyDrawing = 0;\r\n            item.startTime = false;\r\n        });\r\n\r\n        this.generateRenderData(this.renderData[0]);\r\n    }\r\n\r\n    render(rafTime = 0) {\r\n        let canvasHeight = this.calculateCanvasHeight();\r\n        if (canvasHeight !== this.canvas.height) {\r\n            this.canvas.height = canvasHeight;\r\n        }\r\n        this.ctx.clearRect(0, 0, 800, canvasHeight);\r\n        this.draw(this.renderData[0], rafTime);\r\n        window.requestAnimationFrame(time => this.render(time));\r\n    }\r\n\r\n    draw(_textItem: RenderData, rafTime: number) {\r\n        const textItem = <Required<RenderData>>_textItem;\r\n        this.ctx.strokeStyle = textItem.color;\r\n        this.ctx.lineWidth = textItem.strokeWidth;\r\n        this.ctx.fillStyle = 'transparent';\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n\r\n        let scale = textItem.fontSize / this.SCALEBASE;\r\n\r\n        const totalPathLength = textItem.render.reduce(\r\n            (a, c) => a + c.pathLength,\r\n            0\r\n        );\r\n\r\n        if (!textItem.startTime) {\r\n            textItem.startTime = rafTime;\r\n        }\r\n\r\n        textItem.render.forEach((item, itemIndex) => {\r\n            const pathDuration =\r\n                ((item.pathLength / totalPathLength) * textItem.duration) /\r\n                1000;\r\n            const delta = (rafTime - (textItem.startTime as number)) / 1000;\r\n\r\n            const speed = item.pathLength / pathDuration;\r\n\r\n            this.ctx.save();\r\n            this.ctx.scale(scale, scale);\r\n\r\n            this.ctx.lineDashOffset = 1;\r\n            this.ctx.setLineDash([item.dashOffset, item.pathLength + 1]);\r\n            if (textItem.currentlyDrawing === itemIndex) {\r\n                if (item.dashOffset >= item.pathLength) {\r\n                    textItem.currentlyDrawing += 1;\r\n                }\r\n                item.dashOffset += speed * delta;\r\n            }\r\n\r\n            this.ctx.stroke(\r\n                new Path2D(this.processPath(item.path, item.x, item.y))\r\n            );\r\n            this.ctx.restore();\r\n        });\r\n\r\n        textItem.startTime = rafTime;\r\n    }\r\n\r\n    /**\r\n     * Calculates the position of each item on the canvas and returns the data required to render it.\r\n     * @param {RenderData} _textItem A single text block that needs to be rendered.\r\n     */\r\n    generateRenderData(_textItem: RenderData) {\r\n        const textItem = <Required<RenderData>>_textItem;\r\n        let scale = textItem.fontSize / this.SCALEBASE;\r\n        textItem.height = 0;\r\n        // TODO: Create non breaking text\r\n        if (!textItem.breakWord) {\r\n            const textBlock =\r\n                typeof textItem.text === 'string'\r\n                    ? [textItem.text]\r\n                    : textItem.text;\r\n\r\n            const breakedTextBlock = textBlock.map(line => {\r\n                return line.split(' ');\r\n            });\r\n\r\n            const lines: {\r\n                text: string;\r\n                width: number;\r\n            }[] = [\r\n                {\r\n                    text: '',\r\n                    width: 0,\r\n                },\r\n            ];\r\n\r\n            breakedTextBlock.forEach(line => {\r\n                let spaceWidth = 0;\r\n                line.forEach(word => {\r\n                    let wordWidth = 0;\r\n\r\n                    word.split('').forEach(letter => {\r\n                        const charCode = letter.charCodeAt(0);\r\n\r\n                        const currentLetter =\r\n                            this.fontCharacters[charCode] ||\r\n                            this.fontCharacters['63'];\r\n                        let pathPositionCorrection = currentLetter.paths.reduce(\r\n                            (a, c) => a + c.mx - c.dx,\r\n                            0\r\n                        );\r\n                        wordWidth +=\r\n                            (currentLetter.w + pathPositionCorrection) * scale;\r\n                    });\r\n\r\n                    if (\r\n                        lines[lines.length - 1].width +\r\n                            wordWidth +\r\n                            5 * scale +\r\n                            spaceWidth +\r\n                            textItem.x * scale >\r\n                        textItem.width\r\n                    ) {\r\n                        lines.push({\r\n                            text: word + ' ',\r\n                            width: wordWidth,\r\n                        });\r\n                        spaceWidth = 0;\r\n                    } else {\r\n                        lines[lines.length - 1] = {\r\n                            text: lines[lines.length - 1].text + word,\r\n                            width: lines[lines.length - 1].width + wordWidth,\r\n                        };\r\n                        spaceWidth += this.WHITESPACE * scale;\r\n                        lines[lines.length - 1].text += ' ';\r\n                    }\r\n                });\r\n            });\r\n\r\n            let posX = textItem.x / scale,\r\n                posY = this.getTopPosition(0) / scale + textItem.y / scale,\r\n                top = textItem.lineHeight;\r\n\r\n            if (!textItem.render) {\r\n                textItem.render = [];\r\n            }\r\n            lines.forEach(line => {\r\n                let left = 0;\r\n                let x = posX,\r\n                    y = posY;\r\n                if (textItem.textAlign === 'center') {\r\n                    x = (textItem.width - line.width) / 2 / scale;\r\n                }\r\n                line.text.split('').forEach(letter => {\r\n                    if (letter === ' ') {\r\n                        left += this.WHITESPACE;\r\n                    } else {\r\n                        const currentLetter =\r\n                            this.fontCharacters[letter.charCodeAt(0)] ||\r\n                            this.fontCharacters['63'];\r\n\r\n                        currentLetter.paths.forEach(path => {\r\n                            textItem.render.push({\r\n                                path: path.d,\r\n                                x: x + left + path.mx - path.dx,\r\n                                y: y + top - path.my,\r\n                                pathLength: path.pl,\r\n                                dashOffset: 0,\r\n                            });\r\n                        });\r\n\r\n                        left += currentLetter.w;\r\n                    }\r\n                });\r\n                top += textItem.lineHeight;\r\n                if (!textItem.absolutePosition) {\r\n                    console.log(textItem.height, textItem.lineHeight);\r\n                    textItem.height += textItem.lineHeight * scale;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    calculateCanvasHeight() {\r\n        let height = 0;\r\n        this.renderData.forEach(item => {\r\n            if (item.height && item.y) {\r\n                height += item.height + item.y;\r\n            }\r\n        });\r\n        return height + 50;\r\n    }\r\n\r\n    getTopPosition(i: number) {\r\n        if (i === 0) return 0;\r\n        else return 1;\r\n    }\r\n\r\n    alterText(\r\n        id: number,\r\n        text: string,\r\n        letterAnimate: (text: string) => number[]\r\n    ) {\r\n        this.renderData[id].currentlyDrawing = 0;\r\n        this.renderData[id].render = [];\r\n        this.renderData[id].text = text;\r\n\r\n        let shouldAnimate = letterAnimate(text);\r\n        this.generateRenderData(this.renderData[id]);\r\n\r\n        this.renderData[id].render?.forEach((item, i) => {\r\n            if (!shouldAnimate.includes(i)) {\r\n                item.dashOffset = item.pathLength;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates and returns an SVG element\r\n     * @param n The name of the SVG node to be created\r\n     * @param v The attributes of the node\r\n     */\r\n\r\n    createSVGNode(n: string, v: { [x: string]: string }) {\r\n        const e = document.createElementNS('http://www.w3.org/2000/svg', n);\r\n        for (var p in v)\r\n            e.setAttributeNS(\r\n                null,\r\n                p.replace(/[A-Z]/g, function(m) {\r\n                    return '-' + m.toLowerCase();\r\n                }),\r\n                v[p]\r\n            );\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Modifies the move to command of a given path and returns it.\r\n     * @param path The path \"d\" property\r\n     * @param x The x co-ordinate\r\n     * @param y The y co-ordinate\r\n     */\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + 1 + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n\r\n    objectKeys<T>(x: T) {\r\n        let keys = Object.keys(x) as ObjectKeys<T>;\r\n        return keys;\r\n    }\r\n\r\n    boundRect(x: number, y: number, w: number, h = 10) {\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = 'rgba(209, 56, 61,0.4)';\r\n        this.ctx.fillRect(x, y, w, h);\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\nclass Group {\r\n    items: any[];\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor() {\r\n        this.items = [];\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n\r\nif (window) {\r\n    (<any>window).Vara = Vara;\r\n}\r\n"],"names":["Vara","elem","fontSource","text","options","elementName","element","document","querySelector","textItems","renderData","rendered","fontCharacters","canvasWidth","defaultOptions","fontSize","strokeWidth","color","duration","textAlign","autoAnimation","queued","delay","breakWord","letterSpacing","global","width","this","getBoundingClientRect","lineHeight","defaultCharacters","paths","w","h","my","mx","dx","d","pl","canvas","createElement","height","ctx","getContext","appendChild","WHITESPACE","SCALEBASE","contextHeight","init","normalizeOptions","xmlhttp","XMLHttpRequest","open","onreadystatechange","readyState","status","contents","JSON","parse","responseText","_this","c","fontProperties","p","preRender","render","send","objectKeys","forEach","optionKey","undefined","_this2","textItem","i","option","Object","keys","character","svg","createSVGNode","style","position","zIndex","opacity","top","body","svgPathData","char","_this3","path","setAttributeNS","x","getTotalLength","item","currentlyDrawing","startTime","generateRenderData","rafTime","canvasHeight","calculateCanvasHeight","clearRect","draw","window","requestAnimationFrame","time","_this4","_textItem","strokeStyle","lineWidth","fillStyle","lineCap","lineJoin","scale","totalPathLength","reduce","a","pathLength","itemIndex","delta","speed","_this5","save","lineDashOffset","setLineDash","dashOffset","stroke","Path2D","processPath","y","restore","breakedTextBlock","map","line","split","lines","spaceWidth","word","wordWidth","letter","charCode","charCodeAt","currentLetter","_this6","pathPositionCorrection","length","push","posX","posY","getTopPosition","left","absolutePosition","console","log","alterText","id","letterAnimate","shouldAnimate","includes","n","v","e","createElementNS","replace","m","toLowerCase","svgPath","join","boundRect","fillRect","fill"],"mappings":"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"}